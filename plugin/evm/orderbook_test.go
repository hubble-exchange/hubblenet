package evm

import (
	"context"
	"crypto/ecdsa"
	"math/big"
	"testing"

	"github.com/ava-labs/avalanchego/snow/choices"
	"github.com/ava-labs/avalanchego/snow/consensus/snowman"
	"github.com/ava-labs/subnet-evm/accounts/abi"

	"github.com/ava-labs/subnet-evm/core/types"
	"github.com/ava-labs/subnet-evm/plugin/evm/limitorders"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
)

var (
	genesisJSON      string
	orderBookABI     abi.ABI
	alice, bob       common.Address
	aliceKey, bobKey *ecdsa.PrivateKey
	orderBookABIStr  string         = `{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trader","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"indexed":false,"internalType":"string","name":"err","type":"string"},{"indexed":false,"internalType":"uint256","name":"toLiquidate","type":"uint256"}],"name":"LiquidationError","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trader","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"signature","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"fillAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"openInterestNotional","type":"uint256"},{"indexed":false,"internalType":"address","name":"relayer","type":"address"}],"name":"LiquidationOrderMatched","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trader","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"}],"name":"OrderCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"indexed":false,"internalType":"string","name":"err","type":"string"}],"name":"OrderMatchingError","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trader","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"indexed":false,"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"indexed":false,"internalType":"bytes","name":"signature","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"OrderPlaced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderHash0","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderHash1","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"fillAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"openInterestNotional","type":"uint256"},{"indexed":false,"internalType":"address","name":"relayer","type":"address"}],"name":"OrdersMatched","type":"event"},{"inputs":[],"name":"ORDER_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"}],"name":"cancelOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order[2]","name":"orders","type":"tuple[2]"},{"internalType":"bytes[2]","name":"signatures","type":"bytes[2]"},{"internalType":"int256","name":"fillAmount","type":"int256"}],"name":"executeMatchedOrders","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"executeTestOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getLastTradePrices","outputs":[{"internalType":"uint256[]","name":"lastTradePrices","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"}],"name":"getOrderHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"lastPrices","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"trader","type":"address"},{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint256","name":"toLiquidate","type":"uint256"}],"name":"liquidateAndExecuteOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"numAmms","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"orderInfo","outputs":[{"internalType":"uint256","name":"blockPlaced","type":"uint256"},{"internalType":"int256","name":"filledAmount","type":"int256"},{"internalType":"enum IOrderBook.OrderStatus","name":"status","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"placeOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"positions","outputs":[{"internalType":"int256","name":"size","type":"int256"},{"internalType":"uint256","name":"openNotional","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_num","type":"uint256"}],"name":"setNumAMMs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"settleFunding","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"verifySigner","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}]}`
	orderBookAddress common.Address = common.HexToAddress("0x0300000000000000000000000000000000000069")
	_1e18            *big.Int       = big.NewInt(1e18)
	_1e6             *big.Int       = big.NewInt(1e6)
)

func init() {
	var err error

	genesisJSON = `{"config":{"chainId":321123,"homesteadBlock":0,"eip150Block":0,"eip150Hash":"0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0","eip155Block":0,"eip158Block":0,"byzantiumBlock":0,"constantinopleBlock":0,"petersburgBlock":0,"istanbulBlock":0,"muirGlacierBlock":0,"SubnetEVMTimestamp":0,"feeConfig":{"gasLimit":500000000,"targetBlockRate":1,"minBaseFee":60000000000,"targetGas":10000000,"baseFeeChangeDenominator":50,"minBlockGasCost":0,"maxBlockGasCost":0,"blockGasCostStep":10000}},"alloc":{"835cE0760387BC894E91039a88A00b6a69E65D94":{"balance":"0xD3C21BCECCEDA1000000"},"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC":{"balance":"0xD3C21BCECCEDA1000000"},"55ee05dF718f1a5C1441e76190EB1a19eE2C9430":{"balance":"0xD3C21BCECCEDA1000000"},"4Cf2eD3665F6bFA95cE6A11CFDb7A2EF5FC1C7E4":{"balance":"0xD3C21BCECCEDA1000000"},"f39Fd6e51aad88F6F4ce6aB8827279cffFb92266":{"balance":"0xD3C21BCECCEDA1000000"},"70997970C51812dc3A010C7d01b50e0d17dc79C8":{"balance":"0xD3C21BCECCEDA1000000"},"3C44CdDdB6a900fa2b585dd299e03d12FA4293BC":{"balance":"0xD3C21BCECCEDA1000000"},"0x0300000000000000000000000000000000000069":{"balance":"0x0","code":"0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063cf4e0a8a11610097578063e74367b211610066578063e74367b2146102ad578063ed83d79c146102c9578063f6179515146102d3578063f973a2091461030357610100565b8063cf4e0a8a14610228578063d0d7899314610244578063e00abcc914610260578063e684d7181461027c57610100565b806342c1f8a4116100d357806342c1f8a4146101b65780634cd88b76146101d25780637114f7f8146101ee578063a64959151461020c57610100565b80631d48152714610105578063238e203f1461013657806327d57a9e146101685780633245dea514610186575b600080fd5b61011f600480360381019061011a9190611937565b610321565b60405161012d9291906119bb565b60405180910390f35b610150600480360381019061014b9190611a10565b610343565b60405161015f93929190611ad2565b60405180910390f35b61017061037a565b60405161017d9190611b09565b60405180910390f35b6101a0600480360381019061019b9190611b24565b610380565b6040516101ad9190611b09565b60405180910390f35b6101d060048036038101906101cb9190611b24565b610398565b005b6101ec60048036038101906101e79190611bf2565b6103a2565b005b6101f66104ee565b6040516102039190611d28565b60405180910390f35b61022660048036038101906102219190611937565b610594565b005b610242600480360381019061023d9190611d4a565b610688565b005b61025e60048036038101906102599190611937565b61081c565b005b61027a60048036038101906102759190611efc565b61085b565b005b61029660048036038101906102919190611f6e565b610b7e565b6040516102a4929190611fae565b60405180910390f35b6102c760048036038101906102c29190611fd7565b610baf565b005b6102d1610d6c565b005b6102ed60048036038101906102e89190611d4a565b610d6e565b6040516102fa919061205b565b60405180910390f35b61030b610dcb565b604051610318919061205b565b60405180910390f35b600080600061032f85610d6e565b905084602001518192509250509250929050565b60356020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16905083565b60385481565b60376020528060005260406000206000915090505481565b8060388190555050565b60008060019054906101000a900460ff161590508080156103d35750600160008054906101000a900460ff1660ff16105b8061040057506103e230610df2565b1580156103ff5750600160008054906101000a900460ff1660ff16145b5b61043f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610436906120f9565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561047c576001600060016101000a81548160ff0219169083151502179055505b6104868383610e15565b6104906001610398565b80156104e95760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516104e0919061216b565b60405180910390a15b505050565b606060385467ffffffffffffffff81111561050c5761050b6116ac565b5b60405190808252806020026020018201604052801561053a5781602001602082028036833780820191505090505b50905060005b60385481101561059057603760008281526020019081526020016000205482828151811061057157610570612186565b5b6020026020010181815250508080610588906121e4565b915050610540565b5090565b60006105a08383610321565b915050604051806060016040528043815260200160008152602001600160038111156105cf576105ce611a5b565b5b81525060356000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600381111561062457610623611a5b565b5b021790555090505080836020015173ffffffffffffffffffffffffffffffffffffffff167f0593a72066bf5e6b2aaccdabb9e500c4c0bceec4fce9b91859b42c1d83a0ac5f85854260405161067b9392919061233b565b60405180910390a3505050565b806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f1906123c5565b60405180910390fd5b600061070582610d6e565b90506001600381111561071b5761071a611a5b565b5b6035600083815260200190815260200160002060020160009054906101000a900460ff16600381111561075157610750611a5b565b5b14610791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078890612431565b60405180910390fd5b60036035600083815260200190815260200160002060020160006101000a81548160ff021916908360038111156107cb576107ca611a5b565b5b021790555080826020015173ffffffffffffffffffffffffffffffffffffffff167f35974c4230d53fb4c6e8553fd900c88ba92747dbc689a79bcd6ba755cb93698560405160405180910390a35050565b600061082d83838560400151610e72565b5090506108438184604001518560400151611057565b61085683846040015185606001516110e7565b505050565b60008360006002811061087157610870612186565b5b602002015160400151136108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b19061249d565b60405180910390fd5b6000836001600281106108d0576108cf612186565b5b60200201516040015112610919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091090612509565b60405180910390fd5b6000811361095c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095390612575565b60405180910390fd5b826001600281106109705761096f612186565b5b6020020151606001518360006002811061098d5761098c612186565b5b60200201516060015110156109d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ce906125e1565b60405180910390fd5b6000610a13846000600281106109f0576109ef612186565b5b602002015184600060028110610a0957610a08612186565b5b6020020151610321565b9150506000610a5285600160028110610a2f57610a2e612186565b5b602002015185600160028110610a4857610a47612186565b5b6020020151610321565b915050610a7c828487600060028110610a6e57610a6d612186565b5b602002015160400151611057565b610aac8184610a8a90612601565b87600160028110610a9e57610a9d612186565b5b602002015160400151611057565b600085600060028110610ac257610ac1612186565b5b6020020151606001519050610af086600060028110610ae457610ae3612186565b5b602002015185836110e7565b610b1c86600160028110610b0757610b06612186565b5b602002015185610b1690612601565b836110e7565b81837fd16ee3ec5a7ac88d402d3acf24eec63864d8977ba9cf6de40da20e6b96ed3831610b4887611450565b8485610b538a611450565b610b5d919061264a565b33604051610b6e94939291906126a4565b60405180910390a3505050505050565b6036602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b670de0b6b3a7640000818460600151610bc8919061264a565b610bd29190612718565b603660008560000151815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610c389190612749565b92505081905550610c488161149d565b603660008560000151815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610cae919061277d565b925050819055506000610cca8484610cc58561149d565b610e72565b509050610ce481610cda8461149d565b8660400151611057565b610cfb84610cf18461149d565b86606001516110e7565b808573ffffffffffffffffffffffffffffffffffffffff167f8e4c05465a18fc21bef53b0513d2a25883330a9adcd6bf425076f0ed6459585485858860600151878a60600151610d4b919061264a565b33604051610d5d959493929190612811565b60405180910390a35050505050565b565b6000610dc47fba5bdc08c77846c2444ea7c84fcaf3479e3389b274ebc7ab59358538ca00dbe060001b83604051602001610da992919061286b565b6040516020818303038152906040528051906020012061150a565b9050919050565b7fba5bdc08c77846c2444ea7c84fcaf3479e3389b274ebc7ab59358538ca00dbe060001b81565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610e64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5b90612906565b60405180910390fd5b610e6e8282611524565b5050565b6000806000610e818686610321565b91505060016003811115610e9857610e97611a5b565b5b6035600083815260200190815260200160002060020160009054906101000a900460ff166003811115610ece57610ecd611a5b565b5b14610f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0590612972565b60405180910390fd5b6000848760400151610f209190612992565b13610f60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5790612af5565b60405180910390fd5b6000846035600084815260200190815260200160002060010154610f849190612992565b1215610fc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbc90612b61565b60405180910390fd5b610fd2866040015161159f565b610ff1603560008481526020019081526020016000206001015461159f565b1315611032576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102990612bf3565b60405180910390fd5b8060356000838152602001908152602001600020600001549250925050935093915050565b8160356000858152602001908152602001600020600101600082825461107d9190612c13565b9250508190555080603560008581526020019081526020016000206001015414156110e25760026035600085815260200190815260200160002060020160006101000a81548160ff021916908360038111156110dc576110db611a5b565b5b02179055505b505050565b6000670de0b6b3a7640000826111046110ff8661159f565b611450565b61110e919061264a565b6111189190612718565b90506000846020015190506000856000015190506038548110611170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116790612cf3565b60405180910390fd5b6000856036600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546111d19190612992565b1261124557826036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546112399190612d13565b925050819055506113c6565b826036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541061130e57826036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546113029190612749565b925050819055506113c5565b6036600082815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548361136d9190612749565b6036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b5b846036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546114299190612c13565b92505081905550836037600083815260200190815260200160002081905550505050505050565b600080821215611495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148c90612db5565b60405180910390fd5b819050919050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115611502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f990612e47565b60405180910390fd5b819050919050565b600061151d6115176115c1565b83611601565b9050919050565b600060019054906101000a900460ff16611573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156a90612906565b60405180910390fd5b600082805190602001209050600082805190602001209050816001819055508060028190555050505050565b6000808212156115b857816115b390612601565b6115ba565b815b9050919050565b60006115fc7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6115ef611634565b6115f761163e565b611648565b905090565b60008282604051602001611616929190612edf565b60405160208183030381529060405280519060200120905092915050565b6000600154905090565b6000600254905090565b60008383834630604051602001611663959493929190612f16565b6040516020818303038152906040528051906020012090509392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116e48261169b565b810181811067ffffffffffffffff82111715611703576117026116ac565b5b80604052505050565b6000611716611682565b905061172282826116db565b919050565b6000819050919050565b61173a81611727565b811461174557600080fd5b50565b60008135905061175781611731565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117888261175d565b9050919050565b6117988161177d565b81146117a357600080fd5b50565b6000813590506117b58161178f565b92915050565b6000819050919050565b6117ce816117bb565b81146117d957600080fd5b50565b6000813590506117eb816117c5565b92915050565b600060a0828403121561180757611806611696565b5b61181160a061170c565b9050600061182184828501611748565b6000830152506020611835848285016117a6565b6020830152506040611849848285016117dc565b604083015250606061185d84828501611748565b606083015250608061187184828501611748565b60808301525092915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156118a2576118a16116ac565b5b6118ab8261169b565b9050602081019050919050565b82818337600083830152505050565b60006118da6118d584611887565b61170c565b9050828152602081018484840111156118f6576118f5611882565b5b6119018482856118b8565b509392505050565b600082601f83011261191e5761191d61187d565b5b813561192e8482602086016118c7565b91505092915050565b60008060c0838503121561194e5761194d61168c565b5b600061195c858286016117f1565b92505060a083013567ffffffffffffffff81111561197d5761197c611691565b5b61198985828601611909565b9150509250929050565b61199c8161177d565b82525050565b6000819050919050565b6119b5816119a2565b82525050565b60006040820190506119d06000830185611993565b6119dd60208301846119ac565b9392505050565b6119ed816119a2565b81146119f857600080fd5b50565b600081359050611a0a816119e4565b92915050565b600060208284031215611a2657611a2561168c565b5b6000611a34848285016119fb565b91505092915050565b611a4681611727565b82525050565b611a55816117bb565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611a9b57611a9a611a5b565b5b50565b6000819050611aac82611a8a565b919050565b6000611abc82611a9e565b9050919050565b611acc81611ab1565b82525050565b6000606082019050611ae76000830186611a3d565b611af46020830185611a4c565b611b016040830184611ac3565b949350505050565b6000602082019050611b1e6000830184611a3d565b92915050565b600060208284031215611b3a57611b3961168c565b5b6000611b4884828501611748565b91505092915050565b600067ffffffffffffffff821115611b6c57611b6b6116ac565b5b611b758261169b565b9050602081019050919050565b6000611b95611b9084611b51565b61170c565b905082815260208101848484011115611bb157611bb0611882565b5b611bbc8482856118b8565b509392505050565b600082601f830112611bd957611bd861187d565b5b8135611be9848260208601611b82565b91505092915050565b60008060408385031215611c0957611c0861168c565b5b600083013567ffffffffffffffff811115611c2757611c26611691565b5b611c3385828601611bc4565b925050602083013567ffffffffffffffff811115611c5457611c53611691565b5b611c6085828601611bc4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c9f81611727565b82525050565b6000611cb18383611c96565b60208301905092915050565b6000602082019050919050565b6000611cd582611c6a565b611cdf8185611c75565b9350611cea83611c86565b8060005b83811015611d1b578151611d028882611ca5565b9750611d0d83611cbd565b925050600181019050611cee565b5085935050505092915050565b60006020820190508181036000830152611d428184611cca565b905092915050565b600060a08284031215611d6057611d5f61168c565b5b6000611d6e848285016117f1565b91505092915050565b600067ffffffffffffffff821115611d9257611d916116ac565b5b602082029050919050565b600080fd5b6000611db5611db084611d77565b61170c565b90508060a08402830185811115611dcf57611dce611d9d565b5b835b81811015611df85780611de488826117f1565b84526020840193505060a081019050611dd1565b5050509392505050565b600082601f830112611e1757611e1661187d565b5b6002611e24848285611da2565b91505092915050565b600067ffffffffffffffff821115611e4857611e476116ac565b5b602082029050919050565b6000611e66611e6184611e2d565b61170c565b90508060208402830185811115611e8057611e7f611d9d565b5b835b81811015611ec757803567ffffffffffffffff811115611ea557611ea461187d565b5b808601611eb28982611909565b85526020850194505050602081019050611e82565b5050509392505050565b600082601f830112611ee657611ee561187d565b5b6002611ef3848285611e53565b91505092915050565b60008060006101808486031215611f1657611f1561168c565b5b6000611f2486828701611e02565b93505061014084013567ffffffffffffffff811115611f4657611f45611691565b5b611f5286828701611ed1565b925050610160611f64868287016117dc565b9150509250925092565b60008060408385031215611f8557611f8461168c565b5b6000611f9385828601611748565b9250506020611fa4858286016117a6565b9150509250929050565b6000604082019050611fc36000830185611a4c565b611fd06020830184611a3d565b9392505050565b6000806000806101008587031215611ff257611ff161168c565b5b6000612000878288016117a6565b9450506020612011878288016117f1565b93505060c085013567ffffffffffffffff81111561203257612031611691565b5b61203e87828801611909565b92505060e061204f87828801611748565b91505092959194509250565b600060208201905061207060008301846119ac565b92915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006120e3602e83612076565b91506120ee82612087565b604082019050919050565b60006020820190508181036000830152612112816120d6565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061215561215061214b84612119565b612130565b612123565b9050919050565b6121658161213a565b82525050565b6000602082019050612180600083018461215c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121ef82611727565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612222576122216121b5565b5b600182019050919050565b6122368161177d565b82525050565b612245816117bb565b82525050565b60a0820160008201516122616000850182611c96565b506020820151612274602085018261222d565b506040820151612287604085018261223c565b50606082015161229a6060850182611c96565b5060808201516122ad6080850182611c96565b50505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122ed5780820151818401526020810190506122d2565b838111156122fc576000848401525b50505050565b600061230d826122b3565b61231781856122be565b93506123278185602086016122cf565b6123308161169b565b840191505092915050565b600060e082019050612350600083018661224b565b81810360a08301526123628185612302565b905061237160c0830184611a3d565b949350505050565b7f4f425f73656e6465725f69735f6e6f745f747261646572000000000000000000600082015250565b60006123af601783612076565b91506123ba82612379565b602082019050919050565b600060208201905081810360008301526123de816123a2565b9050919050565b7f4f425f4f726465725f646f65735f6e6f745f6578697374000000000000000000600082015250565b600061241b601783612076565b9150612426826123e5565b602082019050919050565b6000602082019050818103600083015261244a8161240e565b9050919050565b7f4f425f6f726465725f305f69735f6e6f745f6c6f6e6700000000000000000000600082015250565b6000612487601683612076565b915061249282612451565b602082019050919050565b600060208201905081810360008301526124b68161247a565b9050919050565b7f4f425f6f726465725f315f69735f6e6f745f73686f7274000000000000000000600082015250565b60006124f3601783612076565b91506124fe826124bd565b602082019050919050565b60006020820190508181036000830152612522816124e6565b9050919050565b7f4f425f66696c6c416d6f756e745f69735f6e6567000000000000000000000000600082015250565b600061255f601483612076565b915061256a82612529565b602082019050919050565b6000602082019050818103600083015261258e81612552565b9050919050565b7f4f425f6f72646572735f646f5f6e6f745f6d6174636800000000000000000000600082015250565b60006125cb601683612076565b91506125d682612595565b602082019050919050565b600060208201905081810360008301526125fa816125be565b9050919050565b600061260c826117bb565b91507f800000000000000000000000000000000000000000000000000000000000000082141561263f5761263e6121b5565b5b816000039050919050565b600061265582611727565b915061266083611727565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612699576126986121b5565b5b828202905092915050565b60006080820190506126b96000830187611a3d565b6126c66020830186611a3d565b6126d36040830185611a3d565b6126e06060830184611993565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061272382611727565b915061272e83611727565b92508261273e5761273d6126e9565b5b828204905092915050565b600061275482611727565b915061275f83611727565b925082821015612772576127716121b5565b5b828203905092915050565b6000612788826117bb565b9150612793836117bb565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156127ce576127cd6121b5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615612806576128056121b5565b5b828203905092915050565b600060a082019050818103600083015261282b8188612302565b905061283a6020830187611a3d565b6128476040830186611a3d565b6128546060830185611a3d565b6128616080830184611993565b9695505050505050565b600060c08201905061288060008301856119ac565b61288d602083018461224b565b9392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006128f0602b83612076565b91506128fb82612894565b604082019050919050565b6000602082019050818103600083015261291f816128e3565b9050919050565b7f4f425f696e76616c69645f6f7264657200000000000000000000000000000000600082015250565b600061295c601083612076565b915061296782612926565b602082019050919050565b6000602082019050818103600083015261298b8161294f565b9050919050565b600061299d826117bb565b91506129a8836117bb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156129e7576129e66121b5565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612a2457612a236121b5565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612a6157612a606121b5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615612a9e57612a9d6121b5565b5b828202905092915050565b7f4f425f66696c6c5f616e645f626173655f7369676e5f6e6f745f6d6174636800600082015250565b6000612adf601f83612076565b9150612aea82612aa9565b602082019050919050565b60006020820190508181036000830152612b0e81612ad2565b9050919050565b7f4f425f696e76616c69645f66696c6c416d6f756e740000000000000000000000600082015250565b6000612b4b601583612076565b9150612b5682612b15565b602082019050919050565b60006020820190508181036000830152612b7a81612b3e565b9050919050565b7f4f425f66696c6c65645f616d6f756e745f6869676865725f7468616e5f6f726460008201527f65725f6261736500000000000000000000000000000000000000000000000000602082015250565b6000612bdd602783612076565b9150612be882612b81565b604082019050919050565b60006020820190508181036000830152612c0c81612bd0565b9050919050565b6000612c1e826117bb565b9150612c29836117bb565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615612c6457612c636121b5565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615612c9c57612c9b6121b5565b5b828201905092915050565b7f4f425f706c656173655f77686974656c6973745f6e65775f616d6d0000000000600082015250565b6000612cdd601b83612076565b9150612ce882612ca7565b602082019050919050565b60006020820190508181036000830152612d0c81612cd0565b9050919050565b6000612d1e82611727565b9150612d2983611727565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612d5e57612d5d6121b5565b5b828201905092915050565b7f53616665436173743a2076616c7565206d75737420626520706f736974697665600082015250565b6000612d9f602083612076565b9150612daa82612d69565b602082019050919050565b60006020820190508181036000830152612dce81612d92565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e206160008201527f6e20696e74323536000000000000000000000000000000000000000000000000602082015250565b6000612e31602883612076565b9150612e3c82612dd5565b604082019050919050565b60006020820190508181036000830152612e6081612e24565b9050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000612ea8600283612e67565b9150612eb382612e72565b600282019050919050565b6000819050919050565b612ed9612ed4826119a2565b612ebe565b82525050565b6000612eea82612e9b565b9150612ef68285612ec8565b602082019150612f068284612ec8565b6020820191508190509392505050565b600060a082019050612f2b60008301886119ac565b612f3860208301876119ac565b612f4560408301866119ac565b612f526060830185611a3d565b612f5f6080830184611993565b969550505050505056fea264697066735822122045e388cdf47cb83a187beea1ec4acdc7fe01fb81ca79be775c76dcb51433b7f264736f6c63430008090033"},"0x0300000000000000000000000000000000000071":{"balance":"0x0","code":"0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063468f02d214610030575b600080fd5b61003861004e565b604051610045919061018b565b60405180910390f35b6060600167ffffffffffffffff81111561006b5761006a6101ad565b5b6040519080825280602002602001820160405280156100995781602001602082028036833780820191505090505b50905062989680816000815181106100b4576100b36101dc565b5b60200260200101818152505090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610102816100ef565b82525050565b600061011483836100f9565b60208301905092915050565b6000602082019050919050565b6000610138826100c3565b61014281856100ce565b935061014d836100df565b8060005b8381101561017e5781516101658882610108565b975061017083610120565b925050600181019050610151565b5085935050505092915050565b600060208201905081810360008301526101a5818461012d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122039e97a6c3ee1092095bdb746678d98a91e90153cb1bec7ee19de94b59bf9e17e64736f6c63430008090033"}},"nonce":"0x0","timestamp":"0x0","extraData":"0x00","gasLimit":"500000000","difficulty":"0x0","mixHash":"0x0000000000000000000000000000000000000000000000000000000000000000","coinbase":"0x0000000000000000000000000000000000000000","number":"0x0","gasUsed":"0x0","parentHash":"0x0000000000000000000000000000000000000000000000000000000000000000"}`

	orderBookABI, err = abi.FromSolidityJson(orderBookABIStr)
	if err != nil {
		panic(err)
	}

	aliceKey, _ = crypto.HexToECDSA("56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027")
	bobKey, _ = crypto.HexToECDSA("31b571bf6894a248831ff937bb49f7754509fe93bbd2517c9c73c4144c0e97dc")
	alice = crypto.PubkeyToAddress(aliceKey.PublicKey)
	bob = crypto.PubkeyToAddress(bobKey.PublicKey)
}

func createPlaceOrderTx(t *testing.T, vm *VM, trader common.Address, privateKey *ecdsa.PrivateKey, size *big.Int, price *big.Int, salt *big.Int) common.Hash {
	nonce := vm.txPool.Nonce(trader)

	order := limitorders.Order{
		Trader:            trader,
		AmmIndex:          big.NewInt(0),
		BaseAssetQuantity: big.NewInt(0).Mul(size, _1e18),
		Price:             big.NewInt(0).Mul(price, _1e6),
		Salt:              salt,
	}
	data, err := orderBookABI.Pack("placeOrder", order, []byte("some data"))
	if err != nil {
		t.Fatalf("orderBookABI.Pack failed: %v", err)
	}
	tx := types.NewTransaction(nonce, orderBookAddress, big.NewInt(0), 8000000, big.NewInt(500000000000), data)
	signer := types.NewLondonSigner(vm.chainConfig.ChainID)
	signedTx, err := types.SignTx(tx, signer, privateKey)
	if err != nil {
		t.Fatalf("types.SignTx failed: %v", err)
	}
	errs := vm.txPool.AddRemotesSync([]*types.Transaction{signedTx})
	for _, err := range errs {
		if err != nil {
			t.Fatalf("lop.txPool.AddOrderBookTx failed: %v", err)
		}
	}
	return signedTx.Hash()
}

//	  A
//	 / \
//	B   C
//	    |
//	    D (matching tx of order 1 and 2)

// vm1 proposes block A containing order 1
// block A is accepted by vm1 and vm2
// vm1 proposes block B containing order 2
// vm1 and vm2 set preference to block B
// vm2 proposes block C containing order 2 & order 3
// vm1 and vm2 set preference to block C
// reorg happens when vm1 accepts block C
// vm2 proposes block D containing matching tx of order 1 and 2
// vm1 and vm2 set preference to block D
// vm1 accepts block D
// block D is important because an earlier bug caused vm1 to crash because order 2 didn't exist in vm1 memory DB after reorg
func TestHubbleLogs(t *testing.T) {
	// Create two VMs which will agree on block A and then
	// build the two distinct preferred chains above
	ctx := context.Background()
	issuer1, vm1, _, _ := GenesisVM(t, true, genesisJSON, "{\"pruning-enabled\":true}", "")
	issuer2, vm2, _, _ := GenesisVM(t, true, genesisJSON, "{\"pruning-enabled\":true}", "")

	defer func() {
		if err := vm1.Shutdown(ctx); err != nil {
			t.Fatal(err)
		}

		if err := vm2.Shutdown(ctx); err != nil {
			t.Fatal(err)
		}
	}()

	// long and short order
	createPlaceOrderTx(t, vm1, alice, aliceKey, big.NewInt(5), big.NewInt(10), big.NewInt(101))
	<-issuer1
	// include alice's long order
	blocksA := buildBlockAndSetPreference(t, vm1, vm2) // block A - both vms accept
	accept(t, blocksA...)

	createPlaceOrderTx(t, vm1, bob, bobKey, big.NewInt(-5), big.NewInt(10), big.NewInt(102))
	<-issuer1
	// bob's short order
	buildBlockAndSetPreference(t, vm1) // block B - vm1 only

	// build block C parallel to block B
	createPlaceOrderTx(t, vm2, bob, bobKey, big.NewInt(-5), big.NewInt(10), big.NewInt(102))
	createPlaceOrderTx(t, vm2, alice, aliceKey, big.NewInt(5), big.NewInt(11), big.NewInt(104))
	<-issuer2
	vm2BlockC := buildBlockAndSetPreference(t, vm2)[0] // block C - vm2 only for now

	vm1BlockC := parseBlock(t, vm1, vm2BlockC)
	setPreference(t, vm1BlockC, vm1)
	accept(t, vm1BlockC) // reorg happens here
	accept(t, vm2BlockC)

	// time.Sleep(2 * time.Second)
	detail1 := vm1.limitOrderProcesser.GetOrderBookAPI().GetDetailedOrderBookData(context.Background())
	detail2 := vm2.limitOrderProcesser.GetOrderBookAPI().GetDetailedOrderBookData(context.Background())
	t.Logf("VM1 Orders: %+v", detail1)
	t.Logf("VM2 Orders: %+v", detail2)

	if _, ok := detail1.OrderMap[common.HexToHash("0x4041077d626a1a036502e9e02b4ac4d013d165204ba85e2696b990fa746cc1c3")]; !ok {
		t.Fatalf("Order 2 is not in VM1")
	}
	if _, ok := detail2.OrderMap[common.HexToHash("0x4041077d626a1a036502e9e02b4ac4d013d165204ba85e2696b990fa746cc1c3")]; !ok {
		t.Fatalf("Order 2 is not in VM2")
	}

	// order matching tx
	vm2BlockD := buildBlockAndSetPreference(t, vm2)[0]
	vm1BlockD := parseBlock(t, vm1, vm2BlockD)
	setPreference(t, vm1BlockD, vm1)
	accept(t, vm1BlockD)
	accept(t, vm2BlockD)

	vm1LastAccepted, err := vm1.LastAccepted(ctx)
	if err != nil {
		t.Fatal(err)
	}
	if vm1LastAccepted != vm1BlockD.ID() {
		t.Fatalf("VM1 last accepted block is not block D")
	}

	vm2LastAccepted, err := vm2.LastAccepted(ctx)
	if err != nil {
		t.Fatal(err)
	}
	if vm2LastAccepted != vm2BlockD.ID() {
		t.Fatalf("VM2 last accepted block is not block D")
	}

	// Verify the Canonical Chain for Both VMs
	if err := vm2.blockChain.ValidateCanonicalChain(); err != nil {
		t.Fatalf("VM2 failed canonical chain verification due to: %s", err)
	}

	if err := vm1.blockChain.ValidateCanonicalChain(); err != nil {
		t.Fatalf("VM1 failed canonical chain verification due to: %s", err)
	}
}

func buildBlockAndSetPreference(t *testing.T, vms ...*VM) []snowman.Block {
	if len(vms) == 0 {
		t.Fatal("No VMs provided")
	}
	response := []snowman.Block{}
	vm1 := vms[0]
	vm1Blk, err := vm1.BuildBlock(context.Background())
	if err != nil {
		t.Fatal(err)
	}

	if err := vm1Blk.Verify(context.Background()); err != nil {
		t.Fatal(err)
	}

	if status := vm1Blk.Status(); status != choices.Processing {
		t.Fatalf("Expected status of built block to be %s, but found %s", choices.Processing, status)
	}

	if err := vm1.SetPreference(context.Background(), vm1Blk.ID()); err != nil {
		t.Fatal(err)
	}

	response = append(response, vm1Blk)

	for _, vm := range vms[1:] {

		vm2Blk, err := vm.ParseBlock(context.Background(), vm1Blk.Bytes())
		if err != nil {
			t.Fatalf("Unexpected error parsing block from vm2: %s", err)
		}
		if err := vm2Blk.Verify(context.Background()); err != nil {
			t.Fatalf("Block failed verification on VM2: %s", err)
		}
		if status := vm2Blk.Status(); status != choices.Processing {
			t.Fatalf("Expected status of block on VM2 to be %s, but found %s", choices.Processing, status)
		}
		if err := vm.SetPreference(context.Background(), vm2Blk.ID()); err != nil {
			t.Fatal(err)
		}
		response = append(response, vm2Blk)
	}

	return response
}

func buildBlock(t *testing.T, vm *VM) snowman.Block {
	vmBlk, err := vm.BuildBlock(context.Background())
	if err != nil {
		t.Fatal(err)
	}

	if err := vmBlk.Verify(context.Background()); err != nil {
		t.Fatal(err)
	}

	if status := vmBlk.Status(); status != choices.Processing {
		t.Fatalf("Expected status of built block to be %s, but found %s", choices.Processing, status)
	}

	return vmBlk
}

func parseBlock(t *testing.T, vm *VM, block snowman.Block) snowman.Block {
	newBlock, err := vm.ParseBlock(context.Background(), block.Bytes())
	if err != nil {
		t.Fatalf("Unexpected error parsing block from vm: %s", err)
	}
	if err := newBlock.Verify(context.Background()); err != nil {
		t.Fatal(err)
	}

	if status := newBlock.Status(); status != choices.Processing {
		t.Fatalf("Expected status of built block to be %s, but found %s", choices.Processing, status)
	}

	return newBlock
}

func setPreference(t *testing.T, block snowman.Block, vms ...*VM) {
	for _, vm := range vms {
		if err := vm.SetPreference(context.Background(), block.ID()); err != nil {
			t.Fatal(err)
		}
	}
}

func accept(t *testing.T, blocks ...snowman.Block) {
	for _, block := range blocks {
		if err := block.Accept(context.Background()); err != nil {
			t.Fatalf("VM failed to accept block: %s", err)
		}
	}
}
