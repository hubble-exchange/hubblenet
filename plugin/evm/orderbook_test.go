package evm

import (
	"context"
	"crypto/ecdsa"
	"math/big"
	"testing"

	"github.com/ava-labs/avalanchego/snow/choices"
	"github.com/ava-labs/avalanchego/snow/consensus/snowman"
	"github.com/ava-labs/subnet-evm/accounts/abi"

	"github.com/ava-labs/subnet-evm/core/types"
	"github.com/ava-labs/subnet-evm/plugin/evm/limitorders"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
)

var (
	genesisJSON      string
	orderBookABI     abi.ABI
	alice, bob       common.Address
	aliceKey, bobKey *ecdsa.PrivateKey
	orderBookABIStr  string         = `{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trader","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"indexed":false,"internalType":"string","name":"err","type":"string"},{"indexed":false,"internalType":"uint256","name":"toLiquidate","type":"uint256"}],"name":"LiquidationError","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trader","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"signature","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"fillAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"openInterestNotional","type":"uint256"},{"indexed":false,"internalType":"address","name":"relayer","type":"address"}],"name":"LiquidationOrderMatched","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trader","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"}],"name":"OrderCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"indexed":false,"internalType":"string","name":"err","type":"string"}],"name":"OrderMatchingError","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trader","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"indexed":false,"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"indexed":false,"internalType":"bytes","name":"signature","type":"bytes"}],"name":"OrderPlaced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderHash0","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderHash1","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"fillAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"openInterestNotional","type":"uint256"},{"indexed":false,"internalType":"address","name":"relayer","type":"address"}],"name":"OrdersMatched","type":"event"},{"inputs":[],"name":"ORDER_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"}],"name":"cancelOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order[2]","name":"orders","type":"tuple[2]"},{"internalType":"bytes[2]","name":"signatures","type":"bytes[2]"},{"internalType":"int256","name":"fillAmount","type":"int256"}],"name":"executeMatchedOrders","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"executeTestOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getLastTradePrices","outputs":[{"internalType":"uint256[]","name":"lastTradePrices","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"}],"name":"getOrderHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"lastPrices","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"trader","type":"address"},{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint256","name":"toLiquidate","type":"uint256"}],"name":"liquidateAndExecuteOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"numAmms","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"orderInfo","outputs":[{"internalType":"uint256","name":"blockPlaced","type":"uint256"},{"internalType":"int256","name":"filledAmount","type":"int256"},{"internalType":"enum IOrderBook.OrderStatus","name":"status","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"placeOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"positions","outputs":[{"internalType":"int256","name":"size","type":"int256"},{"internalType":"uint256","name":"openNotional","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_num","type":"uint256"}],"name":"setNumAMMs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"settleFunding","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"verifySigner","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}]}`
	orderBookAddress common.Address = common.HexToAddress("0x0300000000000000000000000000000000000069")
	_1e18            *big.Int       = big.NewInt(1e18)
	_1e6             *big.Int       = big.NewInt(1e6)
)

func init() {
	var err error

	genesisJSON = `{"config":{"chainId":321123,"homesteadBlock":0,"eip150Block":0,"eip150Hash":"0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0","eip155Block":0,"eip158Block":0,"byzantiumBlock":0,"constantinopleBlock":0,"petersburgBlock":0,"istanbulBlock":0,"muirGlacierBlock":0,"SubnetEVMTimestamp":0,"feeConfig":{"gasLimit":500000000,"targetBlockRate":1,"minBaseFee":60000000000,"targetGas":10000000,"baseFeeChangeDenominator":50,"minBlockGasCost":0,"maxBlockGasCost":0,"blockGasCostStep":10000}},"alloc":{"835cE0760387BC894E91039a88A00b6a69E65D94":{"balance":"0xD3C21BCECCEDA1000000"},"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC":{"balance":"0xD3C21BCECCEDA1000000"},"55ee05dF718f1a5C1441e76190EB1a19eE2C9430":{"balance":"0xD3C21BCECCEDA1000000"},"4Cf2eD3665F6bFA95cE6A11CFDb7A2EF5FC1C7E4":{"balance":"0xD3C21BCECCEDA1000000"},"f39Fd6e51aad88F6F4ce6aB8827279cffFb92266":{"balance":"0xD3C21BCECCEDA1000000"},"70997970C51812dc3A010C7d01b50e0d17dc79C8":{"balance":"0xD3C21BCECCEDA1000000"},"3C44CdDdB6a900fa2b585dd299e03d12FA4293BC":{"balance":"0xD3C21BCECCEDA1000000"},"0x0300000000000000000000000000000000000069":{"balance":"0x0","code":"0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063cf4e0a8a11610097578063e74367b211610066578063e74367b2146102ad578063ed83d79c146102c9578063f6179515146102d3578063f973a2091461030357610100565b8063cf4e0a8a14610228578063d0d7899314610244578063e00abcc914610260578063e684d7181461027c57610100565b806342c1f8a4116100d357806342c1f8a4146101b65780634cd88b76146101d25780637114f7f8146101ee578063a64959151461020c57610100565b80631d48152714610105578063238e203f1461013657806327d57a9e146101685780633245dea514610186575b600080fd5b61011f600480360381019061011a9190611935565b610321565b60405161012d9291906119b9565b60405180910390f35b610150600480360381019061014b9190611a0e565b610343565b60405161015f93929190611ad0565b60405180910390f35b61017061037a565b60405161017d9190611b07565b60405180910390f35b6101a0600480360381019061019b9190611b22565b610380565b6040516101ad9190611b07565b60405180910390f35b6101d060048036038101906101cb9190611b22565b610398565b005b6101ec60048036038101906101e79190611bf0565b6103a2565b005b6101f66104ee565b6040516102039190611d26565b60405180910390f35b61022660048036038101906102219190611935565b610594565b005b610242600480360381019061023d9190611d48565b610686565b005b61025e60048036038101906102599190611935565b61081a565b005b61027a60048036038101906102759190611efa565b610859565b005b61029660048036038101906102919190611f6c565b610b7c565b6040516102a4929190611fac565b60405180910390f35b6102c760048036038101906102c29190611fd5565b610bad565b005b6102d1610d6a565b005b6102ed60048036038101906102e89190611d48565b610d6c565b6040516102fa9190612059565b60405180910390f35b61030b610dc9565b6040516103189190612059565b60405180910390f35b600080600061032f85610d6c565b905084602001518192509250509250929050565b60356020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16905083565b60385481565b60376020528060005260406000206000915090505481565b8060388190555050565b60008060019054906101000a900460ff161590508080156103d35750600160008054906101000a900460ff1660ff16105b8061040057506103e230610df0565b1580156103ff5750600160008054906101000a900460ff1660ff16145b5b61043f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610436906120f7565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561047c576001600060016101000a81548160ff0219169083151502179055505b6104868383610e13565b6104906001610398565b80156104e95760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516104e09190612169565b60405180910390a15b505050565b606060385467ffffffffffffffff81111561050c5761050b6116aa565b5b60405190808252806020026020018201604052801561053a5781602001602082028036833780820191505090505b50905060005b60385481101561059057603760008281526020019081526020016000205482828151811061057157610570612184565b5b6020026020010181815250508080610588906121e2565b915050610540565b5090565b60006105a08383610321565b915050604051806060016040528043815260200160008152602001600160038111156105cf576105ce611a59565b5b81525060356000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600381111561062457610623611a59565b5b021790555090505080836020015173ffffffffffffffffffffffffffffffffffffffff167f4a0244e061aac38aa0b8c777e3549f59325cd4d8eabd15972c80b6557acbb1da8585604051610679929190612339565b60405180910390a3505050565b806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ef906123b5565b60405180910390fd5b600061070382610d6c565b90506001600381111561071957610718611a59565b5b6035600083815260200190815260200160002060020160009054906101000a900460ff16600381111561074f5761074e611a59565b5b1461078f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078690612421565b60405180910390fd5b60036035600083815260200190815260200160002060020160006101000a81548160ff021916908360038111156107c9576107c8611a59565b5b021790555080826020015173ffffffffffffffffffffffffffffffffffffffff167f35974c4230d53fb4c6e8553fd900c88ba92747dbc689a79bcd6ba755cb93698560405160405180910390a35050565b600061082b83838560400151610e70565b5090506108418184604001518560400151611055565b61085483846040015185606001516110e5565b505050565b60008360006002811061086f5761086e612184565b5b602002015160400151136108b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108af9061248d565b60405180910390fd5b6000836001600281106108ce576108cd612184565b5b60200201516040015112610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090e906124f9565b60405180910390fd5b6000811361095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190612565565b60405180910390fd5b8260016002811061096e5761096d612184565b5b6020020151606001518360006002811061098b5761098a612184565b5b60200201516060015110156109d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cc906125d1565b60405180910390fd5b6000610a11846000600281106109ee576109ed612184565b5b602002015184600060028110610a0757610a06612184565b5b6020020151610321565b9150506000610a5085600160028110610a2d57610a2c612184565b5b602002015185600160028110610a4657610a45612184565b5b6020020151610321565b915050610a7a828487600060028110610a6c57610a6b612184565b5b602002015160400151611055565b610aaa8184610a88906125f1565b87600160028110610a9c57610a9b612184565b5b602002015160400151611055565b600085600060028110610ac057610abf612184565b5b6020020151606001519050610aee86600060028110610ae257610ae1612184565b5b602002015185836110e5565b610b1a86600160028110610b0557610b04612184565b5b602002015185610b14906125f1565b836110e5565b81837fd16ee3ec5a7ac88d402d3acf24eec63864d8977ba9cf6de40da20e6b96ed3831610b468761144e565b8485610b518a61144e565b610b5b919061263a565b33604051610b6c9493929190612694565b60405180910390a3505050505050565b6036602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b670de0b6b3a7640000818460600151610bc6919061263a565b610bd09190612708565b603660008560000151815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610c369190612739565b92505081905550610c468161149b565b603660008560000151815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610cac919061276d565b925050819055506000610cc88484610cc38561149b565b610e70565b509050610ce281610cd88461149b565b8660400151611055565b610cf984610cef8461149b565b86606001516110e5565b808573ffffffffffffffffffffffffffffffffffffffff167f8e4c05465a18fc21bef53b0513d2a25883330a9adcd6bf425076f0ed6459585485858860600151878a60600151610d49919061263a565b33604051610d5b959493929190612801565b60405180910390a35050505050565b565b6000610dc27fba5bdc08c77846c2444ea7c84fcaf3479e3389b274ebc7ab59358538ca00dbe060001b83604051602001610da792919061285b565b60405160208183030381529060405280519060200120611508565b9050919050565b7fba5bdc08c77846c2444ea7c84fcaf3479e3389b274ebc7ab59358538ca00dbe060001b81565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e59906128f6565b60405180910390fd5b610e6c8282611522565b5050565b6000806000610e7f8686610321565b91505060016003811115610e9657610e95611a59565b5b6035600083815260200190815260200160002060020160009054906101000a900460ff166003811115610ecc57610ecb611a59565b5b14610f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0390612962565b60405180910390fd5b6000848760400151610f1e9190612982565b13610f5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5590612ae5565b60405180910390fd5b6000846035600084815260200190815260200160002060010154610f829190612982565b1215610fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fba90612b51565b60405180910390fd5b610fd0866040015161159d565b610fef603560008481526020019081526020016000206001015461159d565b1315611030576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102790612be3565b60405180910390fd5b8060356000838152602001908152602001600020600001549250925050935093915050565b8160356000858152602001908152602001600020600101600082825461107b9190612c03565b9250508190555080603560008581526020019081526020016000206001015414156110e05760026035600085815260200190815260200160002060020160006101000a81548160ff021916908360038111156110da576110d9611a59565b5b02179055505b505050565b6000670de0b6b3a7640000826111026110fd8661159d565b61144e565b61110c919061263a565b6111169190612708565b9050600084602001519050600085600001519050603854811061116e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116590612ce3565b60405180910390fd5b6000856036600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546111cf9190612982565b1261124357826036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546112379190612d03565b925050819055506113c4565b826036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541061130c57826036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546113009190612739565b925050819055506113c3565b6036600082815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548361136b9190612739565b6036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b5b846036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546114279190612c03565b92505081905550836037600083815260200190815260200160002081905550505050505050565b600080821215611493576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148a90612da5565b60405180910390fd5b819050919050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115611500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f790612e37565b60405180910390fd5b819050919050565b600061151b6115156115bf565b836115ff565b9050919050565b600060019054906101000a900460ff16611571576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611568906128f6565b60405180910390fd5b600082805190602001209050600082805190602001209050816001819055508060028190555050505050565b6000808212156115b657816115b1906125f1565b6115b8565b815b9050919050565b60006115fa7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6115ed611632565b6115f561163c565b611646565b905090565b60008282604051602001611614929190612ecf565b60405160208183030381529060405280519060200120905092915050565b6000600154905090565b6000600254905090565b60008383834630604051602001611661959493929190612f06565b6040516020818303038152906040528051906020012090509392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116e282611699565b810181811067ffffffffffffffff82111715611701576117006116aa565b5b80604052505050565b6000611714611680565b905061172082826116d9565b919050565b6000819050919050565b61173881611725565b811461174357600080fd5b50565b6000813590506117558161172f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117868261175b565b9050919050565b6117968161177b565b81146117a157600080fd5b50565b6000813590506117b38161178d565b92915050565b6000819050919050565b6117cc816117b9565b81146117d757600080fd5b50565b6000813590506117e9816117c3565b92915050565b600060a0828403121561180557611804611694565b5b61180f60a061170a565b9050600061181f84828501611746565b6000830152506020611833848285016117a4565b6020830152506040611847848285016117da565b604083015250606061185b84828501611746565b606083015250608061186f84828501611746565b60808301525092915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156118a05761189f6116aa565b5b6118a982611699565b9050602081019050919050565b82818337600083830152505050565b60006118d86118d384611885565b61170a565b9050828152602081018484840111156118f4576118f3611880565b5b6118ff8482856118b6565b509392505050565b600082601f83011261191c5761191b61187b565b5b813561192c8482602086016118c5565b91505092915050565b60008060c0838503121561194c5761194b61168a565b5b600061195a858286016117ef565b92505060a083013567ffffffffffffffff81111561197b5761197a61168f565b5b61198785828601611907565b9150509250929050565b61199a8161177b565b82525050565b6000819050919050565b6119b3816119a0565b82525050565b60006040820190506119ce6000830185611991565b6119db60208301846119aa565b9392505050565b6119eb816119a0565b81146119f657600080fd5b50565b600081359050611a08816119e2565b92915050565b600060208284031215611a2457611a2361168a565b5b6000611a32848285016119f9565b91505092915050565b611a4481611725565b82525050565b611a53816117b9565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611a9957611a98611a59565b5b50565b6000819050611aaa82611a88565b919050565b6000611aba82611a9c565b9050919050565b611aca81611aaf565b82525050565b6000606082019050611ae56000830186611a3b565b611af26020830185611a4a565b611aff6040830184611ac1565b949350505050565b6000602082019050611b1c6000830184611a3b565b92915050565b600060208284031215611b3857611b3761168a565b5b6000611b4684828501611746565b91505092915050565b600067ffffffffffffffff821115611b6a57611b696116aa565b5b611b7382611699565b9050602081019050919050565b6000611b93611b8e84611b4f565b61170a565b905082815260208101848484011115611baf57611bae611880565b5b611bba8482856118b6565b509392505050565b600082601f830112611bd757611bd661187b565b5b8135611be7848260208601611b80565b91505092915050565b60008060408385031215611c0757611c0661168a565b5b600083013567ffffffffffffffff811115611c2557611c2461168f565b5b611c3185828601611bc2565b925050602083013567ffffffffffffffff811115611c5257611c5161168f565b5b611c5e85828601611bc2565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c9d81611725565b82525050565b6000611caf8383611c94565b60208301905092915050565b6000602082019050919050565b6000611cd382611c68565b611cdd8185611c73565b9350611ce883611c84565b8060005b83811015611d19578151611d008882611ca3565b9750611d0b83611cbb565b925050600181019050611cec565b5085935050505092915050565b60006020820190508181036000830152611d408184611cc8565b905092915050565b600060a08284031215611d5e57611d5d61168a565b5b6000611d6c848285016117ef565b91505092915050565b600067ffffffffffffffff821115611d9057611d8f6116aa565b5b602082029050919050565b600080fd5b6000611db3611dae84611d75565b61170a565b90508060a08402830185811115611dcd57611dcc611d9b565b5b835b81811015611df65780611de288826117ef565b84526020840193505060a081019050611dcf565b5050509392505050565b600082601f830112611e1557611e1461187b565b5b6002611e22848285611da0565b91505092915050565b600067ffffffffffffffff821115611e4657611e456116aa565b5b602082029050919050565b6000611e64611e5f84611e2b565b61170a565b90508060208402830185811115611e7e57611e7d611d9b565b5b835b81811015611ec557803567ffffffffffffffff811115611ea357611ea261187b565b5b808601611eb08982611907565b85526020850194505050602081019050611e80565b5050509392505050565b600082601f830112611ee457611ee361187b565b5b6002611ef1848285611e51565b91505092915050565b60008060006101808486031215611f1457611f1361168a565b5b6000611f2286828701611e00565b93505061014084013567ffffffffffffffff811115611f4457611f4361168f565b5b611f5086828701611ecf565b925050610160611f62868287016117da565b9150509250925092565b60008060408385031215611f8357611f8261168a565b5b6000611f9185828601611746565b9250506020611fa2858286016117a4565b9150509250929050565b6000604082019050611fc16000830185611a4a565b611fce6020830184611a3b565b9392505050565b6000806000806101008587031215611ff057611fef61168a565b5b6000611ffe878288016117a4565b945050602061200f878288016117ef565b93505060c085013567ffffffffffffffff8111156120305761202f61168f565b5b61203c87828801611907565b92505060e061204d87828801611746565b91505092959194509250565b600060208201905061206e60008301846119aa565b92915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006120e1602e83612074565b91506120ec82612085565b604082019050919050565b60006020820190508181036000830152612110816120d4565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061215361214e61214984612117565b61212e565b612121565b9050919050565b61216381612138565b82525050565b600060208201905061217e600083018461215a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121ed82611725565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156122205761221f6121b3565b5b600182019050919050565b6122348161177b565b82525050565b612243816117b9565b82525050565b60a08201600082015161225f6000850182611c94565b506020820151612272602085018261222b565b506040820151612285604085018261223a565b5060608201516122986060850182611c94565b5060808201516122ab6080850182611c94565b50505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122eb5780820151818401526020810190506122d0565b838111156122fa576000848401525b50505050565b600061230b826122b1565b61231581856122bc565b93506123258185602086016122cd565b61232e81611699565b840191505092915050565b600060c08201905061234e6000830185612249565b81810360a08301526123608184612300565b90509392505050565b7f4f425f73656e6465725f69735f6e6f745f747261646572000000000000000000600082015250565b600061239f601783612074565b91506123aa82612369565b602082019050919050565b600060208201905081810360008301526123ce81612392565b9050919050565b7f4f425f4f726465725f646f65735f6e6f745f6578697374000000000000000000600082015250565b600061240b601783612074565b9150612416826123d5565b602082019050919050565b6000602082019050818103600083015261243a816123fe565b9050919050565b7f4f425f6f726465725f305f69735f6e6f745f6c6f6e6700000000000000000000600082015250565b6000612477601683612074565b915061248282612441565b602082019050919050565b600060208201905081810360008301526124a68161246a565b9050919050565b7f4f425f6f726465725f315f69735f6e6f745f73686f7274000000000000000000600082015250565b60006124e3601783612074565b91506124ee826124ad565b602082019050919050565b60006020820190508181036000830152612512816124d6565b9050919050565b7f4f425f66696c6c416d6f756e745f69735f6e6567000000000000000000000000600082015250565b600061254f601483612074565b915061255a82612519565b602082019050919050565b6000602082019050818103600083015261257e81612542565b9050919050565b7f4f425f6f72646572735f646f5f6e6f745f6d6174636800000000000000000000600082015250565b60006125bb601683612074565b91506125c682612585565b602082019050919050565b600060208201905081810360008301526125ea816125ae565b9050919050565b60006125fc826117b9565b91507f800000000000000000000000000000000000000000000000000000000000000082141561262f5761262e6121b3565b5b816000039050919050565b600061264582611725565b915061265083611725565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612689576126886121b3565b5b828202905092915050565b60006080820190506126a96000830187611a3b565b6126b66020830186611a3b565b6126c36040830185611a3b565b6126d06060830184611991565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061271382611725565b915061271e83611725565b92508261272e5761272d6126d9565b5b828204905092915050565b600061274482611725565b915061274f83611725565b925082821015612762576127616121b3565b5b828203905092915050565b6000612778826117b9565b9150612783836117b9565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156127be576127bd6121b3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156127f6576127f56121b3565b5b828203905092915050565b600060a082019050818103600083015261281b8188612300565b905061282a6020830187611a3b565b6128376040830186611a3b565b6128446060830185611a3b565b6128516080830184611991565b9695505050505050565b600060c08201905061287060008301856119aa565b61287d6020830184612249565b9392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006128e0602b83612074565b91506128eb82612884565b604082019050919050565b6000602082019050818103600083015261290f816128d3565b9050919050565b7f4f425f696e76616c69645f6f7264657200000000000000000000000000000000600082015250565b600061294c601083612074565b915061295782612916565b602082019050919050565b6000602082019050818103600083015261297b8161293f565b9050919050565b600061298d826117b9565b9150612998836117b9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156129d7576129d66121b3565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612a1457612a136121b3565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612a5157612a506121b3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615612a8e57612a8d6121b3565b5b828202905092915050565b7f4f425f66696c6c5f616e645f626173655f7369676e5f6e6f745f6d6174636800600082015250565b6000612acf601f83612074565b9150612ada82612a99565b602082019050919050565b60006020820190508181036000830152612afe81612ac2565b9050919050565b7f4f425f696e76616c69645f66696c6c416d6f756e740000000000000000000000600082015250565b6000612b3b601583612074565b9150612b4682612b05565b602082019050919050565b60006020820190508181036000830152612b6a81612b2e565b9050919050565b7f4f425f66696c6c65645f616d6f756e745f6869676865725f7468616e5f6f726460008201527f65725f6261736500000000000000000000000000000000000000000000000000602082015250565b6000612bcd602783612074565b9150612bd882612b71565b604082019050919050565b60006020820190508181036000830152612bfc81612bc0565b9050919050565b6000612c0e826117b9565b9150612c19836117b9565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615612c5457612c536121b3565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615612c8c57612c8b6121b3565b5b828201905092915050565b7f4f425f706c656173655f77686974656c6973745f6e65775f616d6d0000000000600082015250565b6000612ccd601b83612074565b9150612cd882612c97565b602082019050919050565b60006020820190508181036000830152612cfc81612cc0565b9050919050565b6000612d0e82611725565b9150612d1983611725565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612d4e57612d4d6121b3565b5b828201905092915050565b7f53616665436173743a2076616c7565206d75737420626520706f736974697665600082015250565b6000612d8f602083612074565b9150612d9a82612d59565b602082019050919050565b60006020820190508181036000830152612dbe81612d82565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e206160008201527f6e20696e74323536000000000000000000000000000000000000000000000000602082015250565b6000612e21602883612074565b9150612e2c82612dc5565b604082019050919050565b60006020820190508181036000830152612e5081612e14565b9050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000612e98600283612e57565b9150612ea382612e62565b600282019050919050565b6000819050919050565b612ec9612ec4826119a0565b612eae565b82525050565b6000612eda82612e8b565b9150612ee68285612eb8565b602082019150612ef68284612eb8565b6020820191508190509392505050565b600060a082019050612f1b60008301886119aa565b612f2860208301876119aa565b612f3560408301866119aa565b612f426060830185611a3b565b612f4f6080830184611991565b969550505050505056fea2646970667358221220c753cfe457c6168eaed58d020c88d30ed3dce562e48e08fad63963c912671bb864736f6c63430008090033"},"0x0300000000000000000000000000000000000071":{"balance":"0x0","code":"0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063468f02d214610030575b600080fd5b61003861004e565b604051610045919061018b565b60405180910390f35b6060600167ffffffffffffffff81111561006b5761006a6101ad565b5b6040519080825280602002602001820160405280156100995781602001602082028036833780820191505090505b50905062989680816000815181106100b4576100b36101dc565b5b60200260200101818152505090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610102816100ef565b82525050565b600061011483836100f9565b60208301905092915050565b6000602082019050919050565b6000610138826100c3565b61014281856100ce565b935061014d836100df565b8060005b8381101561017e5781516101658882610108565b975061017083610120565b925050600181019050610151565b5085935050505092915050565b600060208201905081810360008301526101a5818461012d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122039e97a6c3ee1092095bdb746678d98a91e90153cb1bec7ee19de94b59bf9e17e64736f6c63430008090033"}},"nonce":"0x0","timestamp":"0x0","extraData":"0x00","gasLimit":"500000000","difficulty":"0x0","mixHash":"0x0000000000000000000000000000000000000000000000000000000000000000","coinbase":"0x0000000000000000000000000000000000000000","number":"0x0","gasUsed":"0x0","parentHash":"0x0000000000000000000000000000000000000000000000000000000000000000"}`

	orderBookABI, err = abi.FromSolidityJson(orderBookABIStr)
	if err != nil {
		panic(err)
	}

	aliceKey, _ = crypto.HexToECDSA("56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027")
	bobKey, _ = crypto.HexToECDSA("31b571bf6894a248831ff937bb49f7754509fe93bbd2517c9c73c4144c0e97dc")
	alice = crypto.PubkeyToAddress(aliceKey.PublicKey)
	bob = crypto.PubkeyToAddress(bobKey.PublicKey)
}

func createPlaceOrderTx(t *testing.T, vm *VM, trader common.Address, privateKey *ecdsa.PrivateKey, size *big.Int, price *big.Int, salt *big.Int) common.Hash {
	nonce := vm.txPool.Nonce(trader)

	order := limitorders.Order{
		Trader:            trader,
		AmmIndex:          big.NewInt(0),
		BaseAssetQuantity: big.NewInt(0).Mul(size, _1e18),
		Price:             big.NewInt(0).Mul(price, _1e6),
		Salt:              salt,
	}
	data, err := orderBookABI.Pack("placeOrder", order, []byte("some data"))
	if err != nil {
		t.Fatalf("orderBookABI.Pack failed: %v", err)
	}
	tx := types.NewTransaction(nonce, orderBookAddress, big.NewInt(0), 8000000, big.NewInt(500000000000), data)
	signer := types.NewLondonSigner(vm.chainConfig.ChainID)
	signedTx, err := types.SignTx(tx, signer, privateKey)
	if err != nil {
		t.Fatalf("types.SignTx failed: %v", err)
	}
	errs := vm.txPool.AddRemotesSync([]*types.Transaction{signedTx})
	for _, err := range errs {
		if err != nil {
			t.Fatalf("lop.txPool.AddOrderBookTx failed: %v", err)
		}
	}
	return signedTx.Hash()
}

//	  A
//	 / \
//	B   C
//	    |
//	    D (matching tx of order 1 and 2)

// vm1 proposes block A containing order 1
// block A is accepted by vm1 and vm2
// vm1 proposes block B containing order 2
// vm1 and vm2 set preference to block B
// vm2 proposes block C containing order 2 & order 3
// vm1 and vm2 set preference to block C
// reorg happens when vm1 accepts block C
// vm2 proposes block D containing matching tx of order 1 and 2
// vm1 and vm2 set preference to block D
// vm1 accepts block D
// block D is important because an earlier bug caused vm1 to crash because order 2 didn't exist in vm1 memory DB after reorg
func TestHubbleLogs(t *testing.T) {
	// Create two VMs which will agree on block A and then
	// build the two distinct preferred chains above
	ctx := context.Background()
	issuer1, vm1, _, _ := GenesisVM(t, true, genesisJSON, "{\"pruning-enabled\":true}", "")
	issuer2, vm2, _, _ := GenesisVM(t, true, genesisJSON, "{\"pruning-enabled\":true}", "")

	defer func() {
		if err := vm1.Shutdown(ctx); err != nil {
			t.Fatal(err)
		}

		if err := vm2.Shutdown(ctx); err != nil {
			t.Fatal(err)
		}
	}()

	// long and short order
	createPlaceOrderTx(t, vm1, alice, aliceKey, big.NewInt(5), big.NewInt(10), big.NewInt(101))
	<-issuer1
	// include alice's long order
	blocksA := buildBlockAndSetPreference(t, vm1, vm2) // block A - both vms accept
	accept(t, blocksA...)

	createPlaceOrderTx(t, vm1, bob, bobKey, big.NewInt(-5), big.NewInt(10), big.NewInt(102))
	<-issuer1
	// bob's short order
	buildBlockAndSetPreference(t, vm1) // block B - vm1 only

	// build block C parallel to block B
	createPlaceOrderTx(t, vm2, bob, bobKey, big.NewInt(-5), big.NewInt(10), big.NewInt(102))
	createPlaceOrderTx(t, vm2, alice, aliceKey, big.NewInt(5), big.NewInt(11), big.NewInt(104))
	<-issuer2
	vm2BlockC := buildBlockAndSetPreference(t, vm2)[0] // block C - vm2 only for now

	vm1BlockC := parseBlock(t, vm1, vm2BlockC)
	setPreference(t, vm1BlockC, vm1)
	accept(t, vm1BlockC) // reorg happens here
	accept(t, vm2BlockC)

	detail1 := vm1.limitOrderProcesser.GetOrderBookAPI().GetDetailedOrderBookData(context.Background())
	detail2 := vm2.limitOrderProcesser.GetOrderBookAPI().GetDetailedOrderBookData(context.Background())
	t.Logf("VM1 Orders: %+v", detail1)
	t.Logf("VM2 Orders: %+v", detail2)

	if _, ok := detail1.OrderMap[common.HexToHash("0x4041077d626a1a036502e9e02b4ac4d013d165204ba85e2696b990fa746cc1c3")]; !ok {
		t.Fatalf("Order 2 is not in VM1")
	}
	if _, ok := detail2.OrderMap[common.HexToHash("0x4041077d626a1a036502e9e02b4ac4d013d165204ba85e2696b990fa746cc1c3")]; !ok {
		t.Fatalf("Order 2 is not in VM2")
	}

	// order matching tx
	vm2BlockD := buildBlockAndSetPreference(t, vm2)[0]
	vm1BlockD := parseBlock(t, vm1, vm2BlockD)
	setPreference(t, vm1BlockD, vm1)
	accept(t, vm1BlockD)
	accept(t, vm2BlockD)

	vm1LastAccepted, err := vm1.LastAccepted(ctx)
	if err != nil {
		t.Fatal(err)
	}
	if vm1LastAccepted != vm1BlockD.ID() {
		t.Fatalf("VM1 last accepted block is not block D")
	}

	vm2LastAccepted, err := vm2.LastAccepted(ctx)
	if err != nil {
		t.Fatal(err)
	}
	if vm2LastAccepted != vm2BlockD.ID() {
		t.Fatalf("VM2 last accepted block is not block D")
	}

	// Verify the Canonical Chain for Both VMs
	if err := vm2.blockChain.ValidateCanonicalChain(); err != nil {
		t.Fatalf("VM2 failed canonical chain verification due to: %s", err)
	}

	if err := vm1.blockChain.ValidateCanonicalChain(); err != nil {
		t.Fatalf("VM1 failed canonical chain verification due to: %s", err)
	}
}

func buildBlockAndSetPreference(t *testing.T, vms ...*VM) []snowman.Block {
	if len(vms) == 0 {
		t.Fatal("No VMs provided")
	}
	response := []snowman.Block{}
	vm1 := vms[0]
	vm1Blk, err := vm1.BuildBlock(context.Background())
	if err != nil {
		t.Fatal(err)
	}

	if err := vm1Blk.Verify(context.Background()); err != nil {
		t.Fatal(err)
	}

	if status := vm1Blk.Status(); status != choices.Processing {
		t.Fatalf("Expected status of built block to be %s, but found %s", choices.Processing, status)
	}

	if err := vm1.SetPreference(context.Background(), vm1Blk.ID()); err != nil {
		t.Fatal(err)
	}

	response = append(response, vm1Blk)

	for _, vm := range vms[1:] {

		vm2Blk, err := vm.ParseBlock(context.Background(), vm1Blk.Bytes())
		if err != nil {
			t.Fatalf("Unexpected error parsing block from vm2: %s", err)
		}
		if err := vm2Blk.Verify(context.Background()); err != nil {
			t.Fatalf("Block failed verification on VM2: %s", err)
		}
		if status := vm2Blk.Status(); status != choices.Processing {
			t.Fatalf("Expected status of block on VM2 to be %s, but found %s", choices.Processing, status)
		}
		if err := vm.SetPreference(context.Background(), vm2Blk.ID()); err != nil {
			t.Fatal(err)
		}
		response = append(response, vm2Blk)
	}

	return response
}

func buildBlock(t *testing.T, vm *VM) snowman.Block {
	vmBlk, err := vm.BuildBlock(context.Background())
	if err != nil {
		t.Fatal(err)
	}

	if err := vmBlk.Verify(context.Background()); err != nil {
		t.Fatal(err)
	}

	if status := vmBlk.Status(); status != choices.Processing {
		t.Fatalf("Expected status of built block to be %s, but found %s", choices.Processing, status)
	}

	return vmBlk
}

func parseBlock(t *testing.T, vm *VM, block snowman.Block) snowman.Block {
	newBlock, err := vm.ParseBlock(context.Background(), block.Bytes())
	if err != nil {
		t.Fatalf("Unexpected error parsing block from vm: %s", err)
	}
	if err := newBlock.Verify(context.Background()); err != nil {
		t.Fatal(err)
	}

	if status := newBlock.Status(); status != choices.Processing {
		t.Fatalf("Expected status of built block to be %s, but found %s", choices.Processing, status)
	}

	return newBlock
}

func setPreference(t *testing.T, block snowman.Block, vms ...*VM) {
	for _, vm := range vms {
		if err := vm.SetPreference(context.Background(), block.ID()); err != nil {
			t.Fatal(err)
		}
	}
}

func accept(t *testing.T, blocks ...snowman.Block) {
	for _, block := range blocks {
		if err := block.Accept(context.Background()); err != nil {
			t.Fatalf("VM failed to accept block: %s", err)
		}
	}
}
