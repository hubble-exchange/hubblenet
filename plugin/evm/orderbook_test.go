package evm

import (
	"context"
	"crypto/ecdsa"
	"math/big"
	"testing"

	"github.com/ava-labs/avalanchego/snow/choices"
	"github.com/ava-labs/avalanchego/snow/consensus/snowman"
	"github.com/ava-labs/subnet-evm/accounts/abi"

	"github.com/ava-labs/subnet-evm/core/types"
	"github.com/ava-labs/subnet-evm/plugin/evm/limitorders"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
)

var (
	genesisJSON      string
	orderBookABI     abi.ABI
	alice, bob       common.Address
	aliceKey, bobKey *ecdsa.PrivateKey
	orderBookABIStr  string         = `{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trader","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"indexed":false,"internalType":"string","name":"err","type":"string"},{"indexed":false,"internalType":"uint256","name":"toLiquidate","type":"uint256"}],"name":"LiquidationError","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trader","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"signature","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"fillAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"openInterestNotional","type":"uint256"},{"indexed":false,"internalType":"address","name":"relayer","type":"address"}],"name":"LiquidationOrderMatched","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trader","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"}],"name":"OrderCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"indexed":false,"internalType":"string","name":"err","type":"string"}],"name":"OrderMatchingError","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trader","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"indexed":false,"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"indexed":false,"internalType":"bytes","name":"signature","type":"bytes"}],"name":"OrderPlaced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderHash0","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderHash1","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"fillAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"openInterestNotional","type":"uint256"},{"indexed":false,"internalType":"address","name":"relayer","type":"address"}],"name":"OrdersMatched","type":"event"},{"inputs":[],"name":"ORDER_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"}],"name":"cancelOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order[2]","name":"orders","type":"tuple[2]"},{"internalType":"bytes[2]","name":"signatures","type":"bytes[2]"},{"internalType":"int256","name":"fillAmount","type":"int256"}],"name":"executeMatchedOrders","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"executeTestOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getLastTradePrices","outputs":[{"internalType":"uint256[]","name":"lastTradePrices","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"}],"name":"getOrderHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"lastPrices","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"trader","type":"address"},{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint256","name":"toLiquidate","type":"uint256"}],"name":"liquidateAndExecuteOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"numAmms","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"orderInfo","outputs":[{"internalType":"uint256","name":"blockPlaced","type":"uint256"},{"internalType":"int256","name":"filledAmount","type":"int256"},{"internalType":"enum IOrderBook.OrderStatus","name":"status","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"placeOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"positions","outputs":[{"internalType":"int256","name":"size","type":"int256"},{"internalType":"uint256","name":"openNotional","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_num","type":"uint256"}],"name":"setNumAMMs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"settleFunding","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"ammIndex","type":"uint256"},{"internalType":"address","name":"trader","type":"address"},{"internalType":"int256","name":"baseAssetQuantity","type":"int256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"}],"internalType":"struct IOrderBook.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"verifySigner","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}]}`
	orderBookAddress common.Address = common.HexToAddress("0x0300000000000000000000000000000000000069")
	_1e18            *big.Int       = big.NewInt(1e18)
	_1e6             *big.Int       = big.NewInt(1e6)
)

func init() {
	var err error

	genesisJSON = `{"config":{"chainId":321123,"homesteadBlock":0,"eip150Block":0,"eip150Hash":"0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0","eip155Block":0,"eip158Block":0,"byzantiumBlock":0,"constantinopleBlock":0,"petersburgBlock":0,"istanbulBlock":0,"muirGlacierBlock":0,"SubnetEVMTimestamp":0,"feeConfig":{"gasLimit":500000000,"targetBlockRate":1,"minBaseFee":60000000000,"targetGas":10000000,"baseFeeChangeDenominator":50,"minBlockGasCost":0,"maxBlockGasCost":0,"blockGasCostStep":10000}},"alloc":{"835cE0760387BC894E91039a88A00b6a69E65D94":{"balance":"0xD3C21BCECCEDA1000000"},"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC":{"balance":"0xD3C21BCECCEDA1000000"},"55ee05dF718f1a5C1441e76190EB1a19eE2C9430":{"balance":"0xD3C21BCECCEDA1000000"},"4Cf2eD3665F6bFA95cE6A11CFDb7A2EF5FC1C7E4":{"balance":"0xD3C21BCECCEDA1000000"},"f39Fd6e51aad88F6F4ce6aB8827279cffFb92266":{"balance":"0xD3C21BCECCEDA1000000"},"70997970C51812dc3A010C7d01b50e0d17dc79C8":{"balance":"0xD3C21BCECCEDA1000000"},"3C44CdDdB6a900fa2b585dd299e03d12FA4293BC":{"balance":"0xD3C21BCECCEDA1000000"},"0x0300000000000000000000000000000000000069":{"balance":"0x0","code":"0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063cf4e0a8a11610097578063e74367b211610066578063e74367b2146102ad578063ed83d79c146102c9578063f6179515146102d3578063f973a2091461030357610100565b8063cf4e0a8a14610228578063d0d7899314610244578063e00abcc914610260578063e684d7181461027c57610100565b806342c1f8a4116100d357806342c1f8a4146101b65780634cd88b76146101d25780637114f7f8146101ee578063a64959151461020c57610100565b80631d48152714610105578063238e203f1461013657806327d57a9e146101685780633245dea514610186575b600080fd5b61011f600480360381019061011a9190611713565b610321565b60405161012d929190611797565b60405180910390f35b610150600480360381019061014b91906117ec565b610343565b60405161015f939291906118ae565b60405180910390f35b61017061037a565b60405161017d91906118e5565b60405180910390f35b6101a0600480360381019061019b9190611900565b610380565b6040516101ad91906118e5565b60405180910390f35b6101d060048036038101906101cb9190611900565b610398565b005b6101ec60048036038101906101e791906119ce565b6103a2565b005b6101f66104ee565b6040516102039190611b04565b60405180910390f35b61022660048036038101906102219190611713565b610594565b005b610242600480360381019061023d9190611b26565b610686565b005b61025e60048036038101906102599190611713565b61081a565b005b61027a60048036038101906102759190611cd8565b610859565b005b61029660048036038101906102919190611d4a565b61095a565b6040516102a4929190611d8a565b60405180910390f35b6102c760048036038101906102c29190611db3565b61098b565b005b6102d1610b48565b005b6102ed60048036038101906102e89190611b26565b610b4a565b6040516102fa9190611e37565b60405180910390f35b61030b610ba7565b6040516103189190611e37565b60405180910390f35b600080600061032f85610b4a565b905084602001518192509250509250929050565b60356020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16905083565b60385481565b60376020528060005260406000206000915090505481565b8060388190555050565b60008060019054906101000a900460ff161590508080156103d35750600160008054906101000a900460ff1660ff16105b8061040057506103e230610bce565b1580156103ff5750600160008054906101000a900460ff1660ff16145b5b61043f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043690611ed5565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561047c576001600060016101000a81548160ff0219169083151502179055505b6104868383610bf1565b6104906001610398565b80156104e95760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516104e09190611f47565b60405180910390a15b505050565b606060385467ffffffffffffffff81111561050c5761050b611488565b5b60405190808252806020026020018201604052801561053a5781602001602082028036833780820191505090505b50905060005b60385481101561059057603760008281526020019081526020016000205482828151811061057157610570611f62565b5b602002602001018181525050808061058890611fc0565b915050610540565b5090565b60006105a08383610321565b915050604051806060016040528043815260200160008152602001600160038111156105cf576105ce611837565b5b81525060356000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600381111561062457610623611837565b5b021790555090505080836020015173ffffffffffffffffffffffffffffffffffffffff167f4a0244e061aac38aa0b8c777e3549f59325cd4d8eabd15972c80b6557acbb1da8585604051610679929190612117565b60405180910390a3505050565b806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ef90612193565b60405180910390fd5b600061070382610b4a565b90506001600381111561071957610718611837565b5b6035600083815260200190815260200160002060020160009054906101000a900460ff16600381111561074f5761074e611837565b5b1461078f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610786906121ff565b60405180910390fd5b60036035600083815260200190815260200160002060020160006101000a81548160ff021916908360038111156107c9576107c8611837565b5b021790555080826020015173ffffffffffffffffffffffffffffffffffffffff167f35974c4230d53fb4c6e8553fd900c88ba92747dbc689a79bcd6ba755cb93698560405160405180910390a35050565b600061082b83838560400151610c4e565b5090506108418184604001518560400151610e33565b6108548384604001518560600151610ec3565b505050565b60006108958460006002811061087257610871611f62565b5b60200201518460006002811061088b5761088a611f62565b5b6020020151610321565b91505060006108d4856001600281106108b1576108b0611f62565b5b6020020151856001600281106108ca576108c9611f62565b5b6020020151610321565b9150506000856000600281106108ed576108ec611f62565b5b602002015160600151905081837fd16ee3ec5a7ac88d402d3acf24eec63864d8977ba9cf6de40da20e6b96ed38316109248761122c565b848561092f8a61122c565b610939919061221f565b3360405161094a9493929190612279565b60405180910390a3505050505050565b6036602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b670de0b6b3a76400008184606001516109a4919061221f565b6109ae91906122ed565b603660008560000151815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610a14919061231e565b92505081905550610a2481611279565b603660008560000151815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610a8a9190612352565b925050819055506000610aa68484610aa185611279565b610c4e565b509050610ac081610ab684611279565b8660400151610e33565b610ad784610acd84611279565b8660600151610ec3565b808573ffffffffffffffffffffffffffffffffffffffff167f8e4c05465a18fc21bef53b0513d2a25883330a9adcd6bf425076f0ed6459585485858860600151878a60600151610b27919061221f565b33604051610b399594939291906123e6565b60405180910390a35050505050565b565b6000610ba07fba5bdc08c77846c2444ea7c84fcaf3479e3389b274ebc7ab59358538ca00dbe060001b83604051602001610b85929190612440565b604051602081830303815290604052805190602001206112e6565b9050919050565b7fba5bdc08c77846c2444ea7c84fcaf3479e3389b274ebc7ab59358538ca00dbe060001b81565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c37906124db565b60405180910390fd5b610c4a8282611300565b5050565b6000806000610c5d8686610321565b91505060016003811115610c7457610c73611837565b5b6035600083815260200190815260200160002060020160009054906101000a900460ff166003811115610caa57610ca9611837565b5b14610cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce190612547565b60405180910390fd5b6000848760400151610cfc9190612567565b13610d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d33906126ca565b60405180910390fd5b6000846035600084815260200190815260200160002060010154610d609190612567565b1215610da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9890612736565b60405180910390fd5b610dae866040015161137b565b610dcd603560008481526020019081526020016000206001015461137b565b1315610e0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e05906127c8565b60405180910390fd5b8060356000838152602001908152602001600020600001549250925050935093915050565b81603560008581526020019081526020016000206001016000828254610e5991906127e8565b925050819055508060356000858152602001908152602001600020600101541415610ebe5760026035600085815260200190815260200160002060020160006101000a81548160ff02191690836003811115610eb857610eb7611837565b5b02179055505b505050565b6000670de0b6b3a764000082610ee0610edb8661137b565b61122c565b610eea919061221f565b610ef491906122ed565b90506000846020015190506000856000015190506038548110610f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f43906128c8565b60405180910390fd5b6000856036600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610fad9190612567565b1261102157826036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461101591906128e8565b925050819055506111a2565b826036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154106110ea57826036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546110de919061231e565b925050819055506111a1565b6036600082815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015483611149919061231e565b6036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b5b846036600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461120591906127e8565b92505081905550836037600083815260200190815260200160002081905550505050505050565b600080821215611271576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112689061298a565b60405180910390fd5b819050919050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156112de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d590612a1c565b60405180910390fd5b819050919050565b60006112f96112f361139d565b836113dd565b9050919050565b600060019054906101000a900460ff1661134f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611346906124db565b60405180910390fd5b600082805190602001209050600082805190602001209050816001819055508060028190555050505050565b600080821215611394578161138f90612a3c565b611396565b815b9050919050565b60006113d87f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6113cb611410565b6113d361141a565b611424565b905090565b600082826040516020016113f2929190612afd565b60405160208183030381529060405280519060200120905092915050565b6000600154905090565b6000600254905090565b6000838383463060405160200161143f959493929190612b34565b6040516020818303038152906040528051906020012090509392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114c082611477565b810181811067ffffffffffffffff821117156114df576114de611488565b5b80604052505050565b60006114f261145e565b90506114fe82826114b7565b919050565b6000819050919050565b61151681611503565b811461152157600080fd5b50565b6000813590506115338161150d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061156482611539565b9050919050565b61157481611559565b811461157f57600080fd5b50565b6000813590506115918161156b565b92915050565b6000819050919050565b6115aa81611597565b81146115b557600080fd5b50565b6000813590506115c7816115a1565b92915050565b600060a082840312156115e3576115e2611472565b5b6115ed60a06114e8565b905060006115fd84828501611524565b600083015250602061161184828501611582565b6020830152506040611625848285016115b8565b604083015250606061163984828501611524565b606083015250608061164d84828501611524565b60808301525092915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561167e5761167d611488565b5b61168782611477565b9050602081019050919050565b82818337600083830152505050565b60006116b66116b184611663565b6114e8565b9050828152602081018484840111156116d2576116d161165e565b5b6116dd848285611694565b509392505050565b600082601f8301126116fa576116f9611659565b5b813561170a8482602086016116a3565b91505092915050565b60008060c0838503121561172a57611729611468565b5b6000611738858286016115cd565b92505060a083013567ffffffffffffffff8111156117595761175861146d565b5b611765858286016116e5565b9150509250929050565b61177881611559565b82525050565b6000819050919050565b6117918161177e565b82525050565b60006040820190506117ac600083018561176f565b6117b96020830184611788565b9392505050565b6117c98161177e565b81146117d457600080fd5b50565b6000813590506117e6816117c0565b92915050565b60006020828403121561180257611801611468565b5b6000611810848285016117d7565b91505092915050565b61182281611503565b82525050565b61183181611597565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061187757611876611837565b5b50565b600081905061188882611866565b919050565b60006118988261187a565b9050919050565b6118a88161188d565b82525050565b60006060820190506118c36000830186611819565b6118d06020830185611828565b6118dd604083018461189f565b949350505050565b60006020820190506118fa6000830184611819565b92915050565b60006020828403121561191657611915611468565b5b600061192484828501611524565b91505092915050565b600067ffffffffffffffff82111561194857611947611488565b5b61195182611477565b9050602081019050919050565b600061197161196c8461192d565b6114e8565b90508281526020810184848401111561198d5761198c61165e565b5b611998848285611694565b509392505050565b600082601f8301126119b5576119b4611659565b5b81356119c584826020860161195e565b91505092915050565b600080604083850312156119e5576119e4611468565b5b600083013567ffffffffffffffff811115611a0357611a0261146d565b5b611a0f858286016119a0565b925050602083013567ffffffffffffffff811115611a3057611a2f61146d565b5b611a3c858286016119a0565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611a7b81611503565b82525050565b6000611a8d8383611a72565b60208301905092915050565b6000602082019050919050565b6000611ab182611a46565b611abb8185611a51565b9350611ac683611a62565b8060005b83811015611af7578151611ade8882611a81565b9750611ae983611a99565b925050600181019050611aca565b5085935050505092915050565b60006020820190508181036000830152611b1e8184611aa6565b905092915050565b600060a08284031215611b3c57611b3b611468565b5b6000611b4a848285016115cd565b91505092915050565b600067ffffffffffffffff821115611b6e57611b6d611488565b5b602082029050919050565b600080fd5b6000611b91611b8c84611b53565b6114e8565b90508060a08402830185811115611bab57611baa611b79565b5b835b81811015611bd45780611bc088826115cd565b84526020840193505060a081019050611bad565b5050509392505050565b600082601f830112611bf357611bf2611659565b5b6002611c00848285611b7e565b91505092915050565b600067ffffffffffffffff821115611c2457611c23611488565b5b602082029050919050565b6000611c42611c3d84611c09565b6114e8565b90508060208402830185811115611c5c57611c5b611b79565b5b835b81811015611ca357803567ffffffffffffffff811115611c8157611c80611659565b5b808601611c8e89826116e5565b85526020850194505050602081019050611c5e565b5050509392505050565b600082601f830112611cc257611cc1611659565b5b6002611ccf848285611c2f565b91505092915050565b60008060006101808486031215611cf257611cf1611468565b5b6000611d0086828701611bde565b93505061014084013567ffffffffffffffff811115611d2257611d2161146d565b5b611d2e86828701611cad565b925050610160611d40868287016115b8565b9150509250925092565b60008060408385031215611d6157611d60611468565b5b6000611d6f85828601611524565b9250506020611d8085828601611582565b9150509250929050565b6000604082019050611d9f6000830185611828565b611dac6020830184611819565b9392505050565b6000806000806101008587031215611dce57611dcd611468565b5b6000611ddc87828801611582565b9450506020611ded878288016115cd565b93505060c085013567ffffffffffffffff811115611e0e57611e0d61146d565b5b611e1a878288016116e5565b92505060e0611e2b87828801611524565b91505092959194509250565b6000602082019050611e4c6000830184611788565b92915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611ebf602e83611e52565b9150611eca82611e63565b604082019050919050565b60006020820190508181036000830152611eee81611eb2565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611f31611f2c611f2784611ef5565b611f0c565b611eff565b9050919050565b611f4181611f16565b82525050565b6000602082019050611f5c6000830184611f38565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fcb82611503565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ffe57611ffd611f91565b5b600182019050919050565b61201281611559565b82525050565b61202181611597565b82525050565b60a08201600082015161203d6000850182611a72565b5060208201516120506020850182612009565b5060408201516120636040850182612018565b5060608201516120766060850182611a72565b5060808201516120896080850182611a72565b50505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120c95780820151818401526020810190506120ae565b838111156120d8576000848401525b50505050565b60006120e98261208f565b6120f3818561209a565b93506121038185602086016120ab565b61210c81611477565b840191505092915050565b600060c08201905061212c6000830185612027565b81810360a083015261213e81846120de565b90509392505050565b7f4f425f73656e6465725f69735f6e6f745f747261646572000000000000000000600082015250565b600061217d601783611e52565b915061218882612147565b602082019050919050565b600060208201905081810360008301526121ac81612170565b9050919050565b7f4f425f4f726465725f646f65735f6e6f745f6578697374000000000000000000600082015250565b60006121e9601783611e52565b91506121f4826121b3565b602082019050919050565b60006020820190508181036000830152612218816121dc565b9050919050565b600061222a82611503565b915061223583611503565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561226e5761226d611f91565b5b828202905092915050565b600060808201905061228e6000830187611819565b61229b6020830186611819565b6122a86040830185611819565b6122b5606083018461176f565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006122f882611503565b915061230383611503565b925082612313576123126122be565b5b828204905092915050565b600061232982611503565b915061233483611503565b92508282101561234757612346611f91565b5b828203905092915050565b600061235d82611597565b915061236883611597565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156123a3576123a2611f91565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156123db576123da611f91565b5b828203905092915050565b600060a082019050818103600083015261240081886120de565b905061240f6020830187611819565b61241c6040830186611819565b6124296060830185611819565b612436608083018461176f565b9695505050505050565b600060c0820190506124556000830185611788565b6124626020830184612027565b9392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006124c5602b83611e52565b91506124d082612469565b604082019050919050565b600060208201905081810360008301526124f4816124b8565b9050919050565b7f4f425f696e76616c69645f6f7264657200000000000000000000000000000000600082015250565b6000612531601083611e52565b915061253c826124fb565b602082019050919050565b6000602082019050818103600083015261256081612524565b9050919050565b600061257282611597565b915061257d83611597565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156125bc576125bb611f91565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156125f9576125f8611f91565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561263657612635611f91565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561267357612672611f91565b5b828202905092915050565b7f4f425f66696c6c5f616e645f626173655f7369676e5f6e6f745f6d6174636800600082015250565b60006126b4601f83611e52565b91506126bf8261267e565b602082019050919050565b600060208201905081810360008301526126e3816126a7565b9050919050565b7f4f425f696e76616c69645f66696c6c416d6f756e740000000000000000000000600082015250565b6000612720601583611e52565b915061272b826126ea565b602082019050919050565b6000602082019050818103600083015261274f81612713565b9050919050565b7f4f425f66696c6c65645f616d6f756e745f6869676865725f7468616e5f6f726460008201527f65725f6261736500000000000000000000000000000000000000000000000000602082015250565b60006127b2602783611e52565b91506127bd82612756565b604082019050919050565b600060208201905081810360008301526127e1816127a5565b9050919050565b60006127f382611597565b91506127fe83611597565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561283957612838611f91565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561287157612870611f91565b5b828201905092915050565b7f4f425f706c656173655f77686974656c6973745f6e65775f616d6d0000000000600082015250565b60006128b2601b83611e52565b91506128bd8261287c565b602082019050919050565b600060208201905081810360008301526128e1816128a5565b9050919050565b60006128f382611503565b91506128fe83611503565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561293357612932611f91565b5b828201905092915050565b7f53616665436173743a2076616c7565206d75737420626520706f736974697665600082015250565b6000612974602083611e52565b915061297f8261293e565b602082019050919050565b600060208201905081810360008301526129a381612967565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e206160008201527f6e20696e74323536000000000000000000000000000000000000000000000000602082015250565b6000612a06602883611e52565b9150612a11826129aa565b604082019050919050565b60006020820190508181036000830152612a35816129f9565b9050919050565b6000612a4782611597565b91507f8000000000000000000000000000000000000000000000000000000000000000821415612a7a57612a79611f91565b5b816000039050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000612ac6600283612a85565b9150612ad182612a90565b600282019050919050565b6000819050919050565b612af7612af28261177e565b612adc565b82525050565b6000612b0882612ab9565b9150612b148285612ae6565b602082019150612b248284612ae6565b6020820191508190509392505050565b600060a082019050612b496000830188611788565b612b566020830187611788565b612b636040830186611788565b612b706060830185611819565b612b7d608083018461176f565b969550505050505056fea2646970667358221220598afed87da4df3a20ee2dae7169a3a17711063c1582bc401f4a0bf12846206864736f6c63430008090033"},"0x0300000000000000000000000000000000000071":{"balance":"0x0","code":"0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063468f02d214610030575b600080fd5b61003861004e565b604051610045919061018b565b60405180910390f35b6060600167ffffffffffffffff81111561006b5761006a6101ad565b5b6040519080825280602002602001820160405280156100995781602001602082028036833780820191505090505b50905062989680816000815181106100b4576100b36101dc565b5b60200260200101818152505090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610102816100ef565b82525050565b600061011483836100f9565b60208301905092915050565b6000602082019050919050565b6000610138826100c3565b61014281856100ce565b935061014d836100df565b8060005b8381101561017e5781516101658882610108565b975061017083610120565b925050600181019050610151565b5085935050505092915050565b600060208201905081810360008301526101a5818461012d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122039e97a6c3ee1092095bdb746678d98a91e90153cb1bec7ee19de94b59bf9e17e64736f6c63430008090033"}},"nonce":"0x0","timestamp":"0x0","extraData":"0x00","gasLimit":"500000000","difficulty":"0x0","mixHash":"0x0000000000000000000000000000000000000000000000000000000000000000","coinbase":"0x0000000000000000000000000000000000000000","number":"0x0","gasUsed":"0x0","parentHash":"0x0000000000000000000000000000000000000000000000000000000000000000"}`

	// orderBookABI, err = abi.FromSolidityJson(string(limitorders.OrderBookAbi))
	orderBookABI, err = abi.FromSolidityJson(orderBookABIStr)
	if err != nil {
		panic(err)
	}

	aliceKey, _ = crypto.HexToECDSA("56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027")
	bobKey, _ = crypto.HexToECDSA("31b571bf6894a248831ff937bb49f7754509fe93bbd2517c9c73c4144c0e97dc")
	alice = crypto.PubkeyToAddress(aliceKey.PublicKey)
	bob = crypto.PubkeyToAddress(bobKey.PublicKey)
}

func createPlaceOrderTx(t *testing.T, vm *VM, trader common.Address, privateKey *ecdsa.PrivateKey, size *big.Int, price *big.Int, salt *big.Int) common.Hash {
	nonce := vm.txPool.Nonce(trader)

	order := limitorders.Order{
		Trader:            trader,
		AmmIndex:          big.NewInt(0),
		BaseAssetQuantity: big.NewInt(0).Mul(size, _1e18),
		Price:             big.NewInt(0).Mul(price, _1e6),
		Salt:              salt,
	}
	data, err := orderBookABI.Pack("placeOrder", order, []byte("some data"))
	if err != nil {
		t.Fatalf("orderBookABI.Pack failed: %v", err)
	}
	tx := types.NewTransaction(nonce, orderBookAddress, big.NewInt(0), 8000000, big.NewInt(500000000000), data)
	signer := types.NewLondonSigner(vm.chainConfig.ChainID)
	signedTx, err := types.SignTx(tx, signer, privateKey)
	if err != nil {
		t.Fatalf("types.SignTx failed: %v", err)
	}
	errs := vm.txPool.AddRemotesSync([]*types.Transaction{signedTx})
	for _, err := range errs {
		if err != nil {
			t.Fatalf("lop.txPool.AddOrderBookTx failed: %v", err)
		}
	}
	return signedTx.Hash()
}

//	  A
//	 / \
//	B   C
//	    |
//	    D (matching tx of order 1 and 2)

// vm1 proposes block A containing order 1
// block A is accepted
// vm1 proposes block B containing order 2
// vm1 and vm2 set preference to block B
// vm2 proposes block C containing order 2 & order 3
// vm1 and vm2 set preference to block C
// vm2 proposes block D containing matching tx of order 1 and 2
// vm1 and vm2 set preference to block D
// reorg happens when vm1 accepts block D
func TestHubbleLogs(t *testing.T) {
	// Create two VMs which will agree on block A and then
	// build the two distinct preferred chains above
	ctx := context.Background()
	issuer1, vm1, _, _ := GenesisVM(t, true, genesisJSON, "{\"pruning-enabled\":true}", "")
	issuer2, vm2, _, _ := GenesisVM(t, true, genesisJSON, "{\"pruning-enabled\":true}", "")

	defer func() {
		if err := vm1.Shutdown(ctx); err != nil {
			t.Fatal(err)
		}

		if err := vm2.Shutdown(ctx); err != nil {
			t.Fatal(err)
		}
	}()

	// long and short order
	createPlaceOrderTx(t, vm1, alice, aliceKey, big.NewInt(5), big.NewInt(10), big.NewInt(101))
	<-issuer1
	// include alice's long order
	blocksA := buildBlockAndSetPreference(t, vm1, vm2) // block A - both vms accept
	accept(t, blocksA...)

	createPlaceOrderTx(t, vm1, bob, bobKey, big.NewInt(-5), big.NewInt(10), big.NewInt(102))
	<-issuer1
	// bob's short order
	buildBlockAndSetPreference(t, vm1) // block B - vm1 only

	// build block C parallel to block B
	createPlaceOrderTx(t, vm2, bob, bobKey, big.NewInt(-5), big.NewInt(10), big.NewInt(102))
	createPlaceOrderTx(t, vm2, alice, aliceKey, big.NewInt(5), big.NewInt(11), big.NewInt(104))
	<-issuer2
	vm2BlockC := buildBlockAndSetPreference(t, vm2)[0] // block C - vm2 only for now

	vm1BlockC := parseBlock(t, vm1, vm2BlockC)
	setPreference(t, vm1BlockC, vm1)
	accept(t, vm1BlockC)
	accept(t, vm2BlockC)

	detail1 := vm1.limitOrderProcesser.GetOrderBookAPI().GetDetailedOrderBookData(context.Background())
	detail2 := vm2.limitOrderProcesser.GetOrderBookAPI().GetDetailedOrderBookData(context.Background())
	t.Logf("VM1 Orders: %+v", detail1)
	t.Logf("VM2 Orders: %+v", detail2)

	// order matching tx
	vm2BlockD := buildBlockAndSetPreference(t, vm2)[0]
	vm1BlockD := parseBlock(t, vm1, vm2BlockD)
	setPreference(t, vm1BlockD, vm1)
	accept(t, vm1BlockD)
	accept(t, vm2BlockD)

	vm1LastAccepted, err := vm1.LastAccepted(ctx)
	if err != nil {
		t.Fatal(err)
	}
	if vm1LastAccepted != vm1BlockD.ID() {
		t.Fatalf("VM1 last accepted block is not block D")
	}

	vm2LastAccepted, err := vm2.LastAccepted(ctx)
	if err != nil {
		t.Fatal(err)
	}
	if vm2LastAccepted != vm2BlockD.ID() {
		t.Fatalf("VM2 last accepted block is not block D")
	}

	// Verify the Canonical Chain for Both VMs
	if err := vm2.blockChain.ValidateCanonicalChain(); err != nil {
		t.Fatalf("VM2 failed canonical chain verification due to: %s", err)
	}

	if err := vm1.blockChain.ValidateCanonicalChain(); err != nil {
		t.Fatalf("VM1 failed canonical chain verification due to: %s", err)
	}
}

func buildBlockAndSetPreference(t *testing.T, vms ...*VM) []snowman.Block {
	if len(vms) == 0 {
		t.Fatal("No VMs provided")
	}
	response := []snowman.Block{}
	vm1 := vms[0]
	vm1Blk, err := vm1.BuildBlock(context.Background())
	if err != nil {
		t.Fatal(err)
	}

	if err := vm1Blk.Verify(context.Background()); err != nil {
		t.Fatal(err)
	}

	if status := vm1Blk.Status(); status != choices.Processing {
		t.Fatalf("Expected status of built block to be %s, but found %s", choices.Processing, status)
	}

	if err := vm1.SetPreference(context.Background(), vm1Blk.ID()); err != nil {
		t.Fatal(err)
	}

	response = append(response, vm1Blk)

	for _, vm := range vms[1:] {

		vm2Blk, err := vm.ParseBlock(context.Background(), vm1Blk.Bytes())
		if err != nil {
			t.Fatalf("Unexpected error parsing block from vm2: %s", err)
		}
		if err := vm2Blk.Verify(context.Background()); err != nil {
			t.Fatalf("Block failed verification on VM2: %s", err)
		}
		if status := vm2Blk.Status(); status != choices.Processing {
			t.Fatalf("Expected status of block on VM2 to be %s, but found %s", choices.Processing, status)
		}
		if err := vm.SetPreference(context.Background(), vm2Blk.ID()); err != nil {
			t.Fatal(err)
		}
		response = append(response, vm2Blk)
	}

	return response
}

func buildBlock(t *testing.T, vm *VM) snowman.Block {
	vmBlk, err := vm.BuildBlock(context.Background())
	if err != nil {
		t.Fatal(err)
	}

	if err := vmBlk.Verify(context.Background()); err != nil {
		t.Fatal(err)
	}

	if status := vmBlk.Status(); status != choices.Processing {
		t.Fatalf("Expected status of built block to be %s, but found %s", choices.Processing, status)
	}

	return vmBlk
}

func parseBlock(t *testing.T, vm *VM, block snowman.Block) snowman.Block {
	newBlock, err := vm.ParseBlock(context.Background(), block.Bytes())
	if err != nil {
		t.Fatalf("Unexpected error parsing block from vm: %s", err)
	}
	if err := newBlock.Verify(context.Background()); err != nil {
		t.Fatal(err)
	}

	if status := newBlock.Status(); status != choices.Processing {
		t.Fatalf("Expected status of built block to be %s, but found %s", choices.Processing, status)
	}

	return newBlock
}

func setPreference(t *testing.T, block snowman.Block, vms ...*VM) {
	for _, vm := range vms {
		if err := vm.SetPreference(context.Background(), block.ID()); err != nil {
			t.Fatal(err)
		}
	}
}

func accept(t *testing.T, blocks ...snowman.Block) {
	for _, block := range blocks {
		if err := block.Accept(context.Background()); err != nil {
			t.Fatalf("VM failed to accept block: %s", err)
		}
	}
}
