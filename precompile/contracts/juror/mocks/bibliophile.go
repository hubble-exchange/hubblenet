// Code generated by MockGen. DO NOT EDIT.
// Source: bibliophile.go

// Package mock_juror is a generated GoMock package.
package mocks

import (
	big "math/big"
	reflect "reflect"

	bibliophile "github.com/ava-labs/subnet-evm/precompile/contracts/bibliophile"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockBibliophile is a mock of Bibliophile interface.
type MockBibliophile struct {
	ctrl     *gomock.Controller
	recorder *MockBibliophileMockRecorder
}

// MockBibliophileMockRecorder is the mock recorder for MockBibliophile.
type MockBibliophileMockRecorder struct {
	mock *MockBibliophile
}

// NewMockBibliophile creates a new mock instance.
func NewMockBibliophile(ctrl *gomock.Controller) *MockBibliophile {
	mock := &MockBibliophile{ctrl: ctrl}
	mock.recorder = &MockBibliophileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBibliophile) EXPECT() *MockBibliophileMockRecorder {
	return m.recorder
}

// DetermineFillPrice mocks base method.
func (m *MockBibliophile) DetermineFillPrice(marketId int64, fillAmount, longOrderPrice, shortOrderPrice, blockPlaced0, blockPlaced1 *big.Int) (*bibliophile.ValidateOrdersAndDetermineFillPriceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetermineFillPrice", marketId, fillAmount, longOrderPrice, shortOrderPrice, blockPlaced0, blockPlaced1)
	ret0, _ := ret[0].(*bibliophile.ValidateOrdersAndDetermineFillPriceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetermineFillPrice indicates an expected call of DetermineFillPrice.
func (mr *MockBibliophileMockRecorder) DetermineFillPrice(marketId, fillAmount, longOrderPrice, shortOrderPrice, blockPlaced0, blockPlaced1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetermineFillPrice", reflect.TypeOf((*MockBibliophile)(nil).DetermineFillPrice), marketId, fillAmount, longOrderPrice, shortOrderPrice, blockPlaced0, blockPlaced1)
}

// GetBlockPlaced mocks base method.
func (m *MockBibliophile) GetBlockPlaced(orderHash [32]byte) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockPlaced", orderHash)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBlockPlaced indicates an expected call of GetBlockPlaced.
func (mr *MockBibliophileMockRecorder) GetBlockPlaced(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockPlaced", reflect.TypeOf((*MockBibliophile)(nil).GetBlockPlaced), orderHash)
}

// GetMarketAddressFromMarketID mocks base method.
func (m *MockBibliophile) GetMarketAddressFromMarketID(marketID int64) common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketAddressFromMarketID", marketID)
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// GetMarketAddressFromMarketID indicates an expected call of GetMarketAddressFromMarketID.
func (mr *MockBibliophileMockRecorder) GetMarketAddressFromMarketID(marketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketAddressFromMarketID", reflect.TypeOf((*MockBibliophile)(nil).GetMarketAddressFromMarketID), marketID)
}

// GetOrderFilledAmount mocks base method.
func (m *MockBibliophile) GetOrderFilledAmount(orderHash [32]byte) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderFilledAmount", orderHash)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetOrderFilledAmount indicates an expected call of GetOrderFilledAmount.
func (mr *MockBibliophileMockRecorder) GetOrderFilledAmount(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderFilledAmount", reflect.TypeOf((*MockBibliophile)(nil).GetOrderFilledAmount), orderHash)
}

// GetOrderStatus mocks base method.
func (m *MockBibliophile) GetOrderStatus(orderHash [32]byte) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatus", orderHash)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetOrderStatus indicates an expected call of GetOrderStatus.
func (mr *MockBibliophileMockRecorder) GetOrderStatus(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatus", reflect.TypeOf((*MockBibliophile)(nil).GetOrderStatus), orderHash)
}

// GetSize mocks base method.
func (m *MockBibliophile) GetSize(market common.Address, trader *common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize", market, trader)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetSize indicates an expected call of GetSize.
func (mr *MockBibliophileMockRecorder) GetSize(market, trader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockBibliophile)(nil).GetSize), market, trader)
}

// IOC_ExecutionThreshold mocks base method.
func (m *MockBibliophile) IOC_ExecutionThreshold() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOC_ExecutionThreshold")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// IOC_ExecutionThreshold indicates an expected call of IOC_ExecutionThreshold.
func (mr *MockBibliophileMockRecorder) IOC_ExecutionThreshold() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOC_ExecutionThreshold", reflect.TypeOf((*MockBibliophile)(nil).IOC_ExecutionThreshold))
}

// IOC_GetBlockPlaced mocks base method.
func (m *MockBibliophile) IOC_GetBlockPlaced(orderHash [32]byte) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOC_GetBlockPlaced", orderHash)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// IOC_GetBlockPlaced indicates an expected call of IOC_GetBlockPlaced.
func (mr *MockBibliophileMockRecorder) IOC_GetBlockPlaced(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOC_GetBlockPlaced", reflect.TypeOf((*MockBibliophile)(nil).IOC_GetBlockPlaced), orderHash)
}

// IOC_GetOrderFilledAmount mocks base method.
func (m *MockBibliophile) IOC_GetOrderFilledAmount(orderHash [32]byte) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOC_GetOrderFilledAmount", orderHash)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// IOC_GetOrderFilledAmount indicates an expected call of IOC_GetOrderFilledAmount.
func (mr *MockBibliophileMockRecorder) IOC_GetOrderFilledAmount(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOC_GetOrderFilledAmount", reflect.TypeOf((*MockBibliophile)(nil).IOC_GetOrderFilledAmount), orderHash)
}

// IOC_GetOrderStatus mocks base method.
func (m *MockBibliophile) IOC_GetOrderStatus(orderHash [32]byte) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOC_GetOrderStatus", orderHash)
	ret0, _ := ret[0].(int64)
	return ret0
}

// IOC_GetOrderStatus indicates an expected call of IOC_GetOrderStatus.
func (mr *MockBibliophileMockRecorder) IOC_GetOrderStatus(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOC_GetOrderStatus", reflect.TypeOf((*MockBibliophile)(nil).IOC_GetOrderStatus), orderHash)
}

// IOC_GetTimestamp mocks base method.
func (m *MockBibliophile) IOC_GetTimestamp(orderHash [32]byte) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOC_GetTimestamp", orderHash)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// IOC_GetTimestamp indicates an expected call of IOC_GetTimestamp.
func (mr *MockBibliophileMockRecorder) IOC_GetTimestamp(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOC_GetTimestamp", reflect.TypeOf((*MockBibliophile)(nil).IOC_GetTimestamp), orderHash)
}
