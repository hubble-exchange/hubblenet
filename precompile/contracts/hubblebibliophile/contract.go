// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package hubblebibliophile

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
)

const (
	// Gas costs for each function. These are set to 0 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	GetNotionalPositionAndMarginGasCost uint64 = 0 // SET A GAS COST HERE
)

const (
	VAR_MARGIN_STORAGE_SLOT int64 = 10
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// HubbleBibliophileRawABI contains the raw ABI of HubbleBibliophile contract.
	//go:embed contract.abi
	HubbleBibliophileRawABI string

	HubbleBibliophileABI = contract.ParseABI(HubbleBibliophileRawABI)

	HubbleBibliophilePrecompile = createHubbleBibliophilePrecompile()
)

type GetNotionalPositionAndMarginInput struct {
	Trader                 common.Address
	IncludeFundingPayments bool
	Mode                   uint8
}

type GetNotionalPositionAndMarginOutput struct {
	NotionalPosition *big.Int
	Margin           *big.Int
}

// UnpackGetNotionalPositionAndMarginInput attempts to unpack [input] as GetNotionalPositionAndMarginInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetNotionalPositionAndMarginInput(input []byte) (GetNotionalPositionAndMarginInput, error) {
	inputStruct := GetNotionalPositionAndMarginInput{}
	err := HubbleBibliophileABI.UnpackInputIntoInterface(&inputStruct, "getNotionalPositionAndMargin", input)

	return inputStruct, err
}

// PackGetNotionalPositionAndMargin packs [inputStruct] of type GetNotionalPositionAndMarginInput into the appropriate arguments for getNotionalPositionAndMargin.
func PackGetNotionalPositionAndMargin(inputStruct GetNotionalPositionAndMarginInput) ([]byte, error) {
	return HubbleBibliophileABI.Pack("getNotionalPositionAndMargin", inputStruct.Trader, inputStruct.IncludeFundingPayments, inputStruct.Mode)
}

// PackGetNotionalPositionAndMarginOutput attempts to pack given [outputStruct] of type GetNotionalPositionAndMarginOutput
// to conform the ABI outputs.
func PackGetNotionalPositionAndMarginOutput(outputStruct GetNotionalPositionAndMarginOutput) ([]byte, error) {
	return HubbleBibliophileABI.PackOutput("getNotionalPositionAndMargin",
		outputStruct.NotionalPosition,
		outputStruct.Margin,
	)
}

func getNotionalPositionAndMargin(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetNotionalPositionAndMarginGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the GetNotionalPositionAndMarginInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackGetNotionalPositionAndMarginInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	output := _getNotionalPositionAndMargin(accessibleState.GetStateDB(), &inputStruct)
	packedOutput, err := PackGetNotionalPositionAndMarginOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createHubbleBibliophilePrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createHubbleBibliophilePrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"getNotionalPositionAndMargin": getNotionalPositionAndMargin,
	}

	for name, function := range abiFunctionMap {
		method, ok := HubbleBibliophileABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}

func _getNotionalPositionAndMargin(stateDB contract.StateDB, input *GetNotionalPositionAndMarginInput) GetNotionalPositionAndMarginOutput {
	margin := _getNormalizedMargin(stateDB, input.Trader)
	if input.IncludeFundingPayments {
		margin.Sub(margin, _getTotalFunding(input.Trader))
	}
	notionalPosition, unrealizedPnl := _getTotalNotionalPositionAndUnrealizedPnl(input.Trader, margin, input.Mode)
	return GetNotionalPositionAndMarginOutput{
		NotionalPosition: notionalPosition,
		Margin:           new(big.Int).Add(margin, unrealizedPnl),
	}
}

func _getNormalizedMargin(stateDB contract.StateDB, trader common.Address) *big.Int {
	return _lowLevelReadMargin(stateDB, big.NewInt(0), trader)
}

func _lowLevelReadMargin(stateDB contract.StateDB, idx *big.Int, trader common.Address) *big.Int {
	marginStorageSlot := crypto.Keccak256(append(common.LeftPadBytes(idx.Bytes(), 32), common.LeftPadBytes(big.NewInt(VAR_MARGIN_STORAGE_SLOT).Bytes(), 32)...))
	marginStorageSlot = crypto.Keccak256(append(common.LeftPadBytes(trader.Bytes(), 32), marginStorageSlot...))
	return stateDB.GetState(common.HexToAddress("0x0300000000000000000000000000000000000070"), common.BytesToHash(marginStorageSlot)).Big()
}

func _getTotalFunding(trader common.Address) *big.Int {
	return big.NewInt(0)
}

func _getTotalNotionalPositionAndUnrealizedPnl(trader common.Address, margin *big.Int, mode uint8) (*big.Int, *big.Int) {
	return big.NewInt(0), big.NewInt(0)
}
