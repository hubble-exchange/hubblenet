// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package rollupprecompile

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/core/state"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	GetOrderHashGasCost                                  uint64 = 1 /* SET A GAS COST HERE */
	IsTradingAuthorityGasCost                            uint64 = 1 /* SET A GAS COST HERE */
	ValidateCancelOrdersGasCost                          uint64 = 1 /* SET A GAS COST HERE */
	ValidateLiquidationOrderAndDetermineFillPriceGasCost uint64 = 1 /* SET A GAS COST HERE */
	ValidateOrderGasCost                                 uint64 = 1 /* SET A GAS COST HERE */
	ValidateOrdersAndDetermineFillPriceGasCost           uint64 = 1 /* SET A GAS COST HERE */
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// OrderBookRollupPrecompileRawABI contains the raw ABI of OrderBookRollupPrecompile contract.
	//go:embed contract.abi
	OrderBookRollupPrecompileRawABI string

	OrderBookRollupPrecompileABI = contract.ParseABI(OrderBookRollupPrecompileRawABI)

	OrderBookRollupPrecompilePrecompile = createOrderBookRollupPrecompilePrecompile()
)

// IClearingHouseInstruction is an auto generated low-level Go binding around an user-defined struct.
type IClearingHouseInstruction struct {
	AmmIndex  *big.Int
	Trader    common.Address
	OrderHash [32]byte
	Mode      uint8
}

// IOrderBookRollupOrder is an auto generated low-level Go binding around an user-defined struct.
type IOrderBookRollupOrder struct {
	AmmIndex          *big.Int
	Trader            common.Address
	BaseAssetQuantity *big.Int
	Price             *big.Int
	Salt              *big.Int
	ReduceOnly        bool
	ValidUntil        *big.Int
}

type IsTradingAuthorityInput struct {
	Signer    common.Address
	Trader    common.Address
	Orderbook common.Address
}

type ValidateCancelOrdersInput struct {
	Orders    []IOrderBookRollupOrder
	Sender    common.Address
	Orderbook common.Address
}

type ValidateLiquidationOrderAndDetermineFillPriceInput struct {
	Order             IOrderBookRollupOrder
	Signature         []byte
	LiquidationAmount *big.Int
	Validator         common.Address
	Orderbook         common.Address
}

type ValidateLiquidationOrderAndDetermineFillPriceOutput struct {
	FillPrice   *big.Int
	Instruction IClearingHouseInstruction
}

type ValidateOrderInput struct {
	Order      IOrderBookRollupOrder
	Signature  []byte
	FillAmount *big.Int
	OrderType  uint8
	Orderbook  common.Address
}

type ValidateOrdersAndDetermineFillPriceInput struct {
	Orders     [2]IOrderBookRollupOrder
	Signatures [2][]byte
	FillAmount *big.Int
	Validator  common.Address
	Orderbook  common.Address
}

type ValidateOrdersAndDetermineFillPriceOutput struct {
	FillPrice    *big.Int
	Instructions [2]IClearingHouseInstruction
}

// UnpackGetOrderHashInput attempts to unpack [input] into the IOrderBookRollupOrder type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetOrderHashInput(input []byte) (IOrderBookRollupOrder, error) {
	res, err := OrderBookRollupPrecompileABI.UnpackInput("getOrderHash", input)
	if err != nil {
		return nil, err
	}
	unpacked := *abi.ConvertType(res[0], new(IOrderBookRollupOrder)).(*IOrderBookRollupOrder)
	return unpacked, nil
}

// PackGetOrderHash packs [order] of type IOrderBookRollupOrder into the appropriate arguments for getOrderHash.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetOrderHash(order IOrderBookRollupOrder) ([]byte, error) {
	return OrderBookRollupPrecompileABI.Pack("getOrderHash", order)
}

// PackGetOrderHashOutput attempts to pack given orderHash of type [32]byte
// to conform the ABI outputs.
func PackGetOrderHashOutput(orderHash [32]byte) ([]byte, error) {
	return OrderBookRollupPrecompileABI.PackOutput("getOrderHash", orderHash)
}

func getOrderHash(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetOrderHashGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the GetOrderHashInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackGetOrderHashInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT

	var output [32]byte // CUSTOM CODE FOR AN OUTPUT
	packedOutput, err := PackGetOrderHashOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackIsTradingAuthorityInput attempts to unpack [input] as IsTradingAuthorityInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackIsTradingAuthorityInput(input []byte) (IsTradingAuthorityInput, error) {
	inputStruct := IsTradingAuthorityInput{}
	err := OrderBookRollupPrecompileABI.UnpackInputIntoInterface(&inputStruct, "isTradingAuthority", input)

	return inputStruct, err
}

// PackIsTradingAuthority packs [inputStruct] of type IsTradingAuthorityInput into the appropriate arguments for isTradingAuthority.
func PackIsTradingAuthority(inputStruct IsTradingAuthorityInput) ([]byte, error) {
	return OrderBookRollupPrecompileABI.Pack("isTradingAuthority", inputStruct.Signer, inputStruct.Trader, inputStruct.Orderbook)
}

// PackIsTradingAuthorityOutput attempts to pack given isAuthority of type bool
// to conform the ABI outputs.
func PackIsTradingAuthorityOutput(isAuthority bool) ([]byte, error) {
	return OrderBookRollupPrecompileABI.PackOutput("isTradingAuthority", isAuthority)
}

func isTradingAuthority(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, IsTradingAuthorityGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the IsTradingAuthorityInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackIsTradingAuthorityInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	output := IsTradingAuthority(accessibleState.GetStateDB(), inputStruct.Signer, inputStruct.Trader, inputStruct.Orderbook)
	packedOutput, err := PackIsTradingAuthorityOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackValidateCancelOrdersInput attempts to unpack [input] as ValidateCancelOrdersInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackValidateCancelOrdersInput(input []byte) (ValidateCancelOrdersInput, error) {
	inputStruct := ValidateCancelOrdersInput{}
	err := OrderBookRollupPrecompileABI.UnpackInputIntoInterface(&inputStruct, "validateCancelOrders", input)

	return inputStruct, err
}

// PackValidateCancelOrders packs [inputStruct] of type ValidateCancelOrdersInput into the appropriate arguments for validateCancelOrders.
func PackValidateCancelOrders(inputStruct ValidateCancelOrdersInput) ([]byte, error) {
	return OrderBookRollupPrecompileABI.Pack("validateCancelOrders", inputStruct.Orders, inputStruct.Sender, inputStruct.Orderbook)
}

// PackValidateCancelOrdersOutput attempts to pack given orderHashes of type [][32]byte
// to conform the ABI outputs.
func PackValidateCancelOrdersOutput(orderHashes [][32]byte) ([]byte, error) {
	return OrderBookRollupPrecompileABI.PackOutput("validateCancelOrders", orderHashes)
}

func validateCancelOrders(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ValidateCancelOrdersGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the ValidateCancelOrdersInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackValidateCancelOrdersInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT

	var output [][32]byte // CUSTOM CODE FOR AN OUTPUT
	packedOutput, err := PackValidateCancelOrdersOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackValidateLiquidationOrderAndDetermineFillPriceInput attempts to unpack [input] as ValidateLiquidationOrderAndDetermineFillPriceInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackValidateLiquidationOrderAndDetermineFillPriceInput(input []byte) (ValidateLiquidationOrderAndDetermineFillPriceInput, error) {
	inputStruct := ValidateLiquidationOrderAndDetermineFillPriceInput{}
	err := OrderBookRollupPrecompileABI.UnpackInputIntoInterface(&inputStruct, "validateLiquidationOrderAndDetermineFillPrice", input)

	return inputStruct, err
}

// PackValidateLiquidationOrderAndDetermineFillPrice packs [inputStruct] of type ValidateLiquidationOrderAndDetermineFillPriceInput into the appropriate arguments for validateLiquidationOrderAndDetermineFillPrice.
func PackValidateLiquidationOrderAndDetermineFillPrice(inputStruct ValidateLiquidationOrderAndDetermineFillPriceInput) ([]byte, error) {
	return OrderBookRollupPrecompileABI.Pack("validateLiquidationOrderAndDetermineFillPrice", inputStruct.Order, inputStruct.Signature, inputStruct.LiquidationAmount, inputStruct.Validator, inputStruct.Orderbook)
}

// PackValidateLiquidationOrderAndDetermineFillPriceOutput attempts to pack given [outputStruct] of type ValidateLiquidationOrderAndDetermineFillPriceOutput
// to conform the ABI outputs.
func PackValidateLiquidationOrderAndDetermineFillPriceOutput(outputStruct ValidateLiquidationOrderAndDetermineFillPriceOutput) ([]byte, error) {
	return OrderBookRollupPrecompileABI.PackOutput("validateLiquidationOrderAndDetermineFillPrice",
		outputStruct.FillPrice,
		outputStruct.Instruction,
	)
}

func validateLiquidationOrderAndDetermineFillPrice(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ValidateLiquidationOrderAndDetermineFillPriceGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the ValidateLiquidationOrderAndDetermineFillPriceInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackValidateLiquidationOrderAndDetermineFillPriceInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct                                                // CUSTOM CODE OPERATES ON INPUT
	var output ValidateLiquidationOrderAndDetermineFillPriceOutput // CUSTOM CODE FOR AN OUTPUT
	packedOutput, err := PackValidateLiquidationOrderAndDetermineFillPriceOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackValidateOrderInput attempts to unpack [input] as ValidateOrderInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackValidateOrderInput(input []byte) (ValidateOrderInput, error) {
	inputStruct := ValidateOrderInput{}
	err := OrderBookRollupPrecompileABI.UnpackInputIntoInterface(&inputStruct, "validateOrder", input)

	return inputStruct, err
}

// PackValidateOrder packs [inputStruct] of type ValidateOrderInput into the appropriate arguments for validateOrder.
func PackValidateOrder(inputStruct ValidateOrderInput) ([]byte, error) {
	return OrderBookRollupPrecompileABI.Pack("validateOrder", inputStruct.Order, inputStruct.Signature, inputStruct.FillAmount, inputStruct.OrderType, inputStruct.Orderbook)
}

// PackValidateOrderOutput attempts to pack given orderHash of type [32]byte
// to conform the ABI outputs.
func PackValidateOrderOutput(orderHash [32]byte) ([]byte, error) {
	return OrderBookRollupPrecompileABI.PackOutput("validateOrder", orderHash)
}

func validateOrder(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ValidateOrderGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the ValidateOrderInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackValidateOrderInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	output, err := ValidateOrder(accessibleState.GetStateDB(), &inputStruct)
	packedOutput, err := PackValidateOrderOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackValidateOrdersAndDetermineFillPriceInput attempts to unpack [input] as ValidateOrdersAndDetermineFillPriceInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackValidateOrdersAndDetermineFillPriceInput(input []byte) (ValidateOrdersAndDetermineFillPriceInput, error) {
	inputStruct := ValidateOrdersAndDetermineFillPriceInput{}
	err := OrderBookRollupPrecompileABI.UnpackInputIntoInterface(&inputStruct, "validateOrdersAndDetermineFillPrice", input)

	return inputStruct, err
}

// PackValidateOrdersAndDetermineFillPrice packs [inputStruct] of type ValidateOrdersAndDetermineFillPriceInput into the appropriate arguments for validateOrdersAndDetermineFillPrice.
func PackValidateOrdersAndDetermineFillPrice(inputStruct ValidateOrdersAndDetermineFillPriceInput) ([]byte, error) {
	return OrderBookRollupPrecompileABI.Pack("validateOrdersAndDetermineFillPrice", inputStruct.Orders, inputStruct.Signatures, inputStruct.FillAmount, inputStruct.Validator, inputStruct.Orderbook)
}

// PackValidateOrdersAndDetermineFillPriceOutput attempts to pack given [outputStruct] of type ValidateOrdersAndDetermineFillPriceOutput
// to conform the ABI outputs.
func PackValidateOrdersAndDetermineFillPriceOutput(outputStruct ValidateOrdersAndDetermineFillPriceOutput) ([]byte, error) {
	return OrderBookRollupPrecompileABI.PackOutput("validateOrdersAndDetermineFillPrice",
		outputStruct.FillPrice,
		outputStruct.Instructions,
	)
}

func validateOrdersAndDetermineFillPrice(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ValidateOrdersAndDetermineFillPriceGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the ValidateOrdersAndDetermineFillPriceInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackValidateOrdersAndDetermineFillPriceInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct                                      // CUSTOM CODE OPERATES ON INPUT
	var output ValidateOrdersAndDetermineFillPriceOutput // CUSTOM CODE FOR AN OUTPUT
	packedOutput, err := PackValidateOrdersAndDetermineFillPriceOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createOrderBookRollupPrecompilePrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createOrderBookRollupPrecompilePrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"getOrderHash":         getOrderHash,
		"isTradingAuthority":   isTradingAuthority,
		"validateCancelOrders": validateCancelOrders,
		"validateLiquidationOrderAndDetermineFillPrice": validateLiquidationOrderAndDetermineFillPrice,
		"validateOrder":                       validateOrder,
		"validateOrdersAndDetermineFillPrice": validateOrdersAndDetermineFillPrice,
	}

	for name, function := range abiFunctionMap {
		method, ok := OrderBookRollupPrecompileABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
