// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package hubbleconfigmanager

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/allowlist"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 0 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	// This contract also uses AllowList precompile.
	// You should also increase gas costs of functions that read from AllowList storage.
	GetSpreadRatioThresholdGasCost uint64 = 0                                  // SET A GAS COST HERE
	SetSpreadRatioThresholdGasCost uint64 = 0 + allowlist.ReadAllowListGasCost // SET A GAS COST HERE
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
)

// Singleton StatefulPrecompiledContract and signatures.
var (
	ErrCannotSetSpreadRatioThreshold = errors.New("non-enabled cannot call setSpreadRatioThreshold")

	// HubbleConfigManagerRawABI contains the raw ABI of HubbleConfigManager contract.
	//go:embed contract.abi
	HubbleConfigManagerRawABI string

	HubbleConfigManagerABI = contract.ParseABI(HubbleConfigManagerRawABI)

	HubbleConfigManagerPrecompile = createHubbleConfigManagerPrecompile()
	spreadRatioThresholdKey       = common.Hash{'s', 'r', 't'}
	defaultSpreadRatioThreshold   = big.NewInt(1e6)
)

// GetHubbleConfigManagerAllowListStatus returns the role of [address] for the HubbleConfigManager list.
func GetHubbleConfigManagerAllowListStatus(stateDB contract.StateDB, address common.Address) allowlist.Role {
	return allowlist.GetAllowListStatus(stateDB, ContractAddress, address)
}

// SetHubbleConfigManagerAllowListStatus sets the permissions of [address] to [role] for the
// HubbleConfigManager list. Assumes [role] has already been verified as valid.
// This stores the [role] in the contract storage with address [ContractAddress]
// and [address] hash. It means that any reusage of the [address] key for different value
// conflicts with the same slot [role] is stored.
// Precompile implementations must use a different key than [address] for their storage.
func SetHubbleConfigManagerAllowListStatus(stateDB contract.StateDB, address common.Address, role allowlist.Role) {
	allowlist.SetAllowListRole(stateDB, ContractAddress, address, role)
}

// PackGetSpreadRatioThreshold packs the include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetSpreadRatioThreshold() ([]byte, error) {
	return HubbleConfigManagerABI.Pack("getSpreadRatioThreshold")
}

// PackGetSpreadRatioThresholdOutput attempts to pack given result of type *big.Int
// to conform the ABI outputs.
func PackGetSpreadRatioThresholdOutput(result *big.Int) ([]byte, error) {
	return HubbleConfigManagerABI.PackOutput("getSpreadRatioThreshold", result)
}

func getSpreadRatioThreshold(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetSpreadRatioThresholdGasCost); err != nil {
		return nil, 0, err
	}
	// no input provided for this function

	// CUSTOM CODE STARTS HERE
	stateDB := accessibleState.GetStateDB()
	output := GetSpreadRatioThreshold(stateDB)

	packedOutput, err := PackGetSpreadRatioThresholdOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackSetSpreadRatioThresholdInput attempts to unpack [input] into the *big.Int type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackSetSpreadRatioThresholdInput(input []byte) (*big.Int, error) {
	res, err := HubbleConfigManagerABI.UnpackInput("setSpreadRatioThreshold", input)
	if err != nil {
		return big.NewInt(0), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

// PackSetSpreadRatioThreshold packs [response] of type *big.Int into the appropriate arguments for setSpreadRatioThreshold.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackSetSpreadRatioThreshold(response *big.Int) ([]byte, error) {
	return HubbleConfigManagerABI.Pack("setSpreadRatioThreshold", response)
}

func setSpreadRatioThreshold(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, SetSpreadRatioThresholdGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the SetSpreadRatioThresholdInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackSetSpreadRatioThresholdInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// Allow list is enabled and SetSpreadRatioThreshold is a state-changer function.
	// This part of the code restricts the function to be called only by enabled/admin addresses in the allow list.
	// You can modify/delete this code if you don't want this function to be restricted by the allow list.
	stateDB := accessibleState.GetStateDB()
	// Verify that the caller is in the allow list and therefore has the right to call this function.
	callerStatus := allowlist.GetAllowListStatus(stateDB, ContractAddress, caller)
	if !callerStatus.IsEnabled() {
		return nil, remainingGas, fmt.Errorf("%w: %s", ErrCannotSetSpreadRatioThreshold, caller)
	}
	// allow list code ends here.

	// CUSTOM CODE STARTS HERE
	setSpreadRatioThresholdInStateDB(stateDB, inputStruct)
	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createHubbleConfigManagerPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.
// Access to the getters/setters is controlled by an allow list for ContractAddress.
func createHubbleConfigManagerPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction
	functions = append(functions, allowlist.CreateAllowListFunctions(ContractAddress)...)

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"getSpreadRatioThreshold": getSpreadRatioThreshold,
		"setSpreadRatioThreshold": setSpreadRatioThreshold,
	}

	for name, function := range abiFunctionMap {
		method, ok := HubbleConfigManagerABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}

func GetSpreadRatioThreshold(stateDB contract.StateDB) *big.Int {
	value := stateDB.GetState(ContractAddress, spreadRatioThresholdKey)
	return new(big.Int).SetBytes(value[:])
}

func setSpreadRatioThresholdInStateDB(stateDB contract.StateDB, value *big.Int) {
	stateDB.SetState(ContractAddress, spreadRatioThresholdKey, common.BigToHash(value))
}
