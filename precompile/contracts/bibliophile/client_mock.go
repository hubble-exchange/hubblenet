// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_bibliophile is a generated GoMock package.
package bibliophile

import (
	big "math/big"
	reflect "reflect"

	contract "github.com/ava-labs/subnet-evm/precompile/contract"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockBibliophileClient is a mock of BibliophileClient interface.
type MockBibliophileClient struct {
	ctrl     *gomock.Controller
	recorder *MockBibliophileClientMockRecorder
}

// MockBibliophileClientMockRecorder is the mock recorder for MockBibliophileClient.
type MockBibliophileClientMockRecorder struct {
	mock *MockBibliophileClient
}

// NewMockBibliophileClient creates a new mock instance.
func NewMockBibliophileClient(ctrl *gomock.Controller) *MockBibliophileClient {
	mock := &MockBibliophileClient{ctrl: ctrl}
	mock.recorder = &MockBibliophileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBibliophileClient) EXPECT() *MockBibliophileClientMockRecorder {
	return m.recorder
}

// DetermineFillPrice mocks base method.
func (m *MockBibliophileClient) DetermineFillPrice(marketId int64, longOrderPrice, shortOrderPrice, blockPlaced0, blockPlaced1 *big.Int) (*ValidateOrdersAndDetermineFillPriceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetermineFillPrice", marketId, longOrderPrice, shortOrderPrice, blockPlaced0, blockPlaced1)
	ret0, _ := ret[0].(*ValidateOrdersAndDetermineFillPriceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetermineFillPrice indicates an expected call of DetermineFillPrice.
func (mr *MockBibliophileClientMockRecorder) DetermineFillPrice(marketId, longOrderPrice, shortOrderPrice, blockPlaced0, blockPlaced1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetermineFillPrice", reflect.TypeOf((*MockBibliophileClient)(nil).DetermineFillPrice), marketId, longOrderPrice, shortOrderPrice, blockPlaced0, blockPlaced1)
}

// DetermineLiquidationFillPrice mocks base method.
func (m *MockBibliophileClient) DetermineLiquidationFillPrice(marketId int64, baseAssetQuantity, price *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetermineLiquidationFillPrice", marketId, baseAssetQuantity, price)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetermineLiquidationFillPrice indicates an expected call of DetermineLiquidationFillPrice.
func (mr *MockBibliophileClientMockRecorder) DetermineLiquidationFillPrice(marketId, baseAssetQuantity, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetermineLiquidationFillPrice", reflect.TypeOf((*MockBibliophileClient)(nil).DetermineLiquidationFillPrice), marketId, baseAssetQuantity, price)
}

// GetAccessibleState mocks base method.
func (m *MockBibliophileClient) GetAccessibleState() contract.AccessibleState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessibleState")
	ret0, _ := ret[0].(contract.AccessibleState)
	return ret0
}

// GetAccessibleState indicates an expected call of GetAccessibleState.
func (mr *MockBibliophileClientMockRecorder) GetAccessibleState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessibleState", reflect.TypeOf((*MockBibliophileClient)(nil).GetAccessibleState))
}

// GetAskSize mocks base method.
func (m *MockBibliophileClient) GetAskSize(ammAddress common.Address, price *big.Int) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAskSize", ammAddress, price)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetAskSize indicates an expected call of GetAskSize.
func (mr *MockBibliophileClientMockRecorder) GetAskSize(ammAddress, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAskSize", reflect.TypeOf((*MockBibliophileClient)(nil).GetAskSize), ammAddress, price)
}

// GetAsksHead mocks base method.
func (m *MockBibliophileClient) GetAsksHead(market common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsksHead", market)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetAsksHead indicates an expected call of GetAsksHead.
func (mr *MockBibliophileClientMockRecorder) GetAsksHead(market interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsksHead", reflect.TypeOf((*MockBibliophileClient)(nil).GetAsksHead), market)
}

// GetAvailableMargin mocks base method.
func (m *MockBibliophileClient) GetAvailableMargin(trader common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableMargin", trader)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetAvailableMargin indicates an expected call of GetAvailableMargin.
func (mr *MockBibliophileClientMockRecorder) GetAvailableMargin(trader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableMargin", reflect.TypeOf((*MockBibliophileClient)(nil).GetAvailableMargin), trader)
}

// GetBidSize mocks base method.
func (m *MockBibliophileClient) GetBidSize(ammAddress common.Address, price *big.Int) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBidSize", ammAddress, price)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBidSize indicates an expected call of GetBidSize.
func (mr *MockBibliophileClientMockRecorder) GetBidSize(ammAddress, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBidSize", reflect.TypeOf((*MockBibliophileClient)(nil).GetBidSize), ammAddress, price)
}

// GetBidsHead mocks base method.
func (m *MockBibliophileClient) GetBidsHead(market common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBidsHead", market)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBidsHead indicates an expected call of GetBidsHead.
func (mr *MockBibliophileClientMockRecorder) GetBidsHead(market interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBidsHead", reflect.TypeOf((*MockBibliophileClient)(nil).GetBidsHead), market)
}

// GetBlockPlaced mocks base method.
func (m *MockBibliophileClient) GetBlockPlaced(orderHash [32]byte) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockPlaced", orderHash)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBlockPlaced indicates an expected call of GetBlockPlaced.
func (mr *MockBibliophileClientMockRecorder) GetBlockPlaced(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockPlaced", reflect.TypeOf((*MockBibliophileClient)(nil).GetBlockPlaced), orderHash)
}

// GetImpactMarginNotional mocks base method.
func (m *MockBibliophileClient) GetImpactMarginNotional(ammAddress common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImpactMarginNotional", ammAddress)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetImpactMarginNotional indicates an expected call of GetImpactMarginNotional.
func (mr *MockBibliophileClientMockRecorder) GetImpactMarginNotional(ammAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImpactMarginNotional", reflect.TypeOf((*MockBibliophileClient)(nil).GetImpactMarginNotional), ammAddress)
}

// GetLastPrice mocks base method.
func (m *MockBibliophileClient) GetLastPrice(ammAddress common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPrice", ammAddress)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetLastPrice indicates an expected call of GetLastPrice.
func (mr *MockBibliophileClientMockRecorder) GetLastPrice(ammAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPrice", reflect.TypeOf((*MockBibliophileClient)(nil).GetLastPrice), ammAddress)
}

// GetLongOpenOrdersAmount mocks base method.
func (m *MockBibliophileClient) GetLongOpenOrdersAmount(trader common.Address, ammIndex *big.Int) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongOpenOrdersAmount", trader, ammIndex)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetLongOpenOrdersAmount indicates an expected call of GetLongOpenOrdersAmount.
func (mr *MockBibliophileClientMockRecorder) GetLongOpenOrdersAmount(trader, ammIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongOpenOrdersAmount", reflect.TypeOf((*MockBibliophileClient)(nil).GetLongOpenOrdersAmount), trader, ammIndex)
}

// GetMarketAddressFromMarketID mocks base method.
func (m *MockBibliophileClient) GetMarketAddressFromMarketID(marketId int64) common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketAddressFromMarketID", marketId)
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// GetMarketAddressFromMarketID indicates an expected call of GetMarketAddressFromMarketID.
func (mr *MockBibliophileClientMockRecorder) GetMarketAddressFromMarketID(marketId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketAddressFromMarketID", reflect.TypeOf((*MockBibliophileClient)(nil).GetMarketAddressFromMarketID), marketId)
}

// GetMinAllowableMargin mocks base method.
func (m *MockBibliophileClient) GetMinAllowableMargin() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinAllowableMargin")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetMinAllowableMargin indicates an expected call of GetMinAllowableMargin.
func (mr *MockBibliophileClientMockRecorder) GetMinAllowableMargin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinAllowableMargin", reflect.TypeOf((*MockBibliophileClient)(nil).GetMinAllowableMargin))
}

// GetMinSizeRequirement mocks base method.
func (m *MockBibliophileClient) GetMinSizeRequirement(marketId int64) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinSizeRequirement", marketId)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetMinSizeRequirement indicates an expected call of GetMinSizeRequirement.
func (mr *MockBibliophileClientMockRecorder) GetMinSizeRequirement(marketId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinSizeRequirement", reflect.TypeOf((*MockBibliophileClient)(nil).GetMinSizeRequirement), marketId)
}

// GetNextAskPrice mocks base method.
func (m *MockBibliophileClient) GetNextAskPrice(ammAddress common.Address, price *big.Int) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextAskPrice", ammAddress, price)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetNextAskPrice indicates an expected call of GetNextAskPrice.
func (mr *MockBibliophileClientMockRecorder) GetNextAskPrice(ammAddress, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextAskPrice", reflect.TypeOf((*MockBibliophileClient)(nil).GetNextAskPrice), ammAddress, price)
}

// GetNextBidPrice mocks base method.
func (m *MockBibliophileClient) GetNextBidPrice(ammAddress common.Address, price *big.Int) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextBidPrice", ammAddress, price)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetNextBidPrice indicates an expected call of GetNextBidPrice.
func (mr *MockBibliophileClientMockRecorder) GetNextBidPrice(ammAddress, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextBidPrice", reflect.TypeOf((*MockBibliophileClient)(nil).GetNextBidPrice), ammAddress, price)
}

// GetOrderFilledAmount mocks base method.
func (m *MockBibliophileClient) GetOrderFilledAmount(orderHash [32]byte) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderFilledAmount", orderHash)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetOrderFilledAmount indicates an expected call of GetOrderFilledAmount.
func (mr *MockBibliophileClientMockRecorder) GetOrderFilledAmount(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderFilledAmount", reflect.TypeOf((*MockBibliophileClient)(nil).GetOrderFilledAmount), orderHash)
}

// GetOrderStatus mocks base method.
func (m *MockBibliophileClient) GetOrderStatus(orderHash [32]byte) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatus", orderHash)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetOrderStatus indicates an expected call of GetOrderStatus.
func (mr *MockBibliophileClientMockRecorder) GetOrderStatus(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatus", reflect.TypeOf((*MockBibliophileClient)(nil).GetOrderStatus), orderHash)
}

// GetReduceOnlyAmount mocks base method.
func (m *MockBibliophileClient) GetReduceOnlyAmount(trader common.Address, ammIndex *big.Int) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReduceOnlyAmount", trader, ammIndex)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetReduceOnlyAmount indicates an expected call of GetReduceOnlyAmount.
func (mr *MockBibliophileClientMockRecorder) GetReduceOnlyAmount(trader, ammIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReduceOnlyAmount", reflect.TypeOf((*MockBibliophileClient)(nil).GetReduceOnlyAmount), trader, ammIndex)
}

// GetShortOpenOrdersAmount mocks base method.
func (m *MockBibliophileClient) GetShortOpenOrdersAmount(trader common.Address, ammIndex *big.Int) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortOpenOrdersAmount", trader, ammIndex)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetShortOpenOrdersAmount indicates an expected call of GetShortOpenOrdersAmount.
func (mr *MockBibliophileClientMockRecorder) GetShortOpenOrdersAmount(trader, ammIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortOpenOrdersAmount", reflect.TypeOf((*MockBibliophileClient)(nil).GetShortOpenOrdersAmount), trader, ammIndex)
}

// GetSize mocks base method.
func (m *MockBibliophileClient) GetSize(market common.Address, trader *common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize", market, trader)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetSize indicates an expected call of GetSize.
func (mr *MockBibliophileClientMockRecorder) GetSize(market, trader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockBibliophileClient)(nil).GetSize), market, trader)
}

// GetTakerFee mocks base method.
func (m *MockBibliophileClient) GetTakerFee() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTakerFee")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetTakerFee indicates an expected call of GetTakerFee.
func (mr *MockBibliophileClientMockRecorder) GetTakerFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTakerFee", reflect.TypeOf((*MockBibliophileClient)(nil).GetTakerFee))
}

// GetUpperAndLowerBoundForMarket mocks base method.
func (m *MockBibliophileClient) GetUpperAndLowerBoundForMarket(marketId int64) (*big.Int, *big.Int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpperAndLowerBoundForMarket", marketId)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(*big.Int)
	return ret0, ret1
}

// GetUpperAndLowerBoundForMarket indicates an expected call of GetUpperAndLowerBoundForMarket.
func (mr *MockBibliophileClientMockRecorder) GetUpperAndLowerBoundForMarket(marketId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpperAndLowerBoundForMarket", reflect.TypeOf((*MockBibliophileClient)(nil).GetUpperAndLowerBoundForMarket), marketId)
}

// IOC_GetBlockPlaced mocks base method.
func (m *MockBibliophileClient) IOC_GetBlockPlaced(orderHash [32]byte) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOC_GetBlockPlaced", orderHash)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// IOC_GetBlockPlaced indicates an expected call of IOC_GetBlockPlaced.
func (mr *MockBibliophileClientMockRecorder) IOC_GetBlockPlaced(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOC_GetBlockPlaced", reflect.TypeOf((*MockBibliophileClient)(nil).IOC_GetBlockPlaced), orderHash)
}

// IOC_GetExpirationCap mocks base method.
func (m *MockBibliophileClient) IOC_GetExpirationCap() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOC_GetExpirationCap")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// IOC_GetExpirationCap indicates an expected call of IOC_GetExpirationCap.
func (mr *MockBibliophileClientMockRecorder) IOC_GetExpirationCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOC_GetExpirationCap", reflect.TypeOf((*MockBibliophileClient)(nil).IOC_GetExpirationCap))
}

// IOC_GetOrderFilledAmount mocks base method.
func (m *MockBibliophileClient) IOC_GetOrderFilledAmount(orderHash [32]byte) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOC_GetOrderFilledAmount", orderHash)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// IOC_GetOrderFilledAmount indicates an expected call of IOC_GetOrderFilledAmount.
func (mr *MockBibliophileClientMockRecorder) IOC_GetOrderFilledAmount(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOC_GetOrderFilledAmount", reflect.TypeOf((*MockBibliophileClient)(nil).IOC_GetOrderFilledAmount), orderHash)
}

// IOC_GetOrderStatus mocks base method.
func (m *MockBibliophileClient) IOC_GetOrderStatus(orderHash [32]byte) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOC_GetOrderStatus", orderHash)
	ret0, _ := ret[0].(int64)
	return ret0
}

// IOC_GetOrderStatus indicates an expected call of IOC_GetOrderStatus.
func (mr *MockBibliophileClientMockRecorder) IOC_GetOrderStatus(orderHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOC_GetOrderStatus", reflect.TypeOf((*MockBibliophileClient)(nil).IOC_GetOrderStatus), orderHash)
}

// IsTradingAuthority mocks base method.
func (m *MockBibliophileClient) IsTradingAuthority(senderOrSigner, trader common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTradingAuthority", senderOrSigner, trader)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTradingAuthority indicates an expected call of IsTradingAuthority.
func (mr *MockBibliophileClientMockRecorder) IsTradingAuthority(senderOrSigner, trader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTradingAuthority", reflect.TypeOf((*MockBibliophileClient)(nil).IsTradingAuthority), senderOrSigner, trader)
}
