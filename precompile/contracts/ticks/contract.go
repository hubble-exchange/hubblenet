// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package ticks

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/precompile/contracts/bibliophile"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	GetBaseQuoteGasCost    uint64 = 69
	GetPrevTickGasCost     uint64 = 69
	GetQuoteGasCost        uint64 = 69
	SampleImpactAskGasCost uint64 = 69
	SampleImpactBidGasCost uint64 = 69
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// TicksRawABI contains the raw ABI of Ticks contract.
	//go:embed contract.abi
	TicksRawABI string

	TicksABI = contract.ParseABI(TicksRawABI)

	TicksPrecompile = createTicksPrecompile()
)

type GetBaseQuoteInput struct {
	Amm           common.Address
	QuoteQuantity *big.Int
}

type GetPrevTickInput struct {
	Amm   common.Address
	IsBid bool
	Tick  *big.Int
}

type GetQuoteInput struct {
	Amm               common.Address
	BaseAssetQuantity *big.Int
}

// UnpackGetBaseQuoteInput attempts to unpack [input] as GetBaseQuoteInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetBaseQuoteInput(input []byte) (GetBaseQuoteInput, error) {
	inputStruct := GetBaseQuoteInput{}
	err := TicksABI.UnpackInputIntoInterface(&inputStruct, "getBaseQuote", input)

	return inputStruct, err
}

// PackGetBaseQuote packs [inputStruct] of type GetBaseQuoteInput into the appropriate arguments for getBaseQuote.
func PackGetBaseQuote(inputStruct GetBaseQuoteInput) ([]byte, error) {
	return TicksABI.Pack("getBaseQuote", inputStruct.Amm, inputStruct.QuoteQuantity)
}

// PackGetBaseQuoteOutput attempts to pack given rate of type *big.Int
// to conform the ABI outputs.
func PackGetBaseQuoteOutput(rate *big.Int) ([]byte, error) {
	return TicksABI.PackOutput("getBaseQuote", rate)
}

func getBaseQuote(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetBaseQuoteGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the GetBaseQuoteInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackGetBaseQuoteInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	bibliophile := bibliophile.NewBibliophileClient(accessibleState)
	output := GetBaseQuote(bibliophile, inputStruct.Amm, inputStruct.QuoteQuantity)
	packedOutput, err := PackGetBaseQuoteOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackGetPrevTickInput attempts to unpack [input] as GetPrevTickInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetPrevTickInput(input []byte) (GetPrevTickInput, error) {
	inputStruct := GetPrevTickInput{}
	err := TicksABI.UnpackInputIntoInterface(&inputStruct, "getPrevTick", input)

	return inputStruct, err
}

// PackGetPrevTick packs [inputStruct] of type GetPrevTickInput into the appropriate arguments for getPrevTick.
func PackGetPrevTick(inputStruct GetPrevTickInput) ([]byte, error) {
	return TicksABI.Pack("getPrevTick", inputStruct.Amm, inputStruct.IsBid, inputStruct.Tick)
}

// PackGetPrevTickOutput attempts to pack given prevTick of type *big.Int
// to conform the ABI outputs.
func PackGetPrevTickOutput(prevTick *big.Int) ([]byte, error) {
	return TicksABI.PackOutput("getPrevTick", prevTick)
}

func getPrevTick(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetPrevTickGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the GetPrevTickInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackGetPrevTickInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	bibliophile := bibliophile.NewBibliophileClient(accessibleState)
	output, err := GetPrevTick(bibliophile, inputStruct)
	if err != nil {
		return nil, remainingGas, err
	}
	packedOutput, err := PackGetPrevTickOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackGetQuoteInput attempts to unpack [input] as GetQuoteInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetQuoteInput(input []byte) (GetQuoteInput, error) {
	inputStruct := GetQuoteInput{}
	err := TicksABI.UnpackInputIntoInterface(&inputStruct, "getQuote", input)

	return inputStruct, err
}

// PackGetQuote packs [inputStruct] of type GetQuoteInput into the appropriate arguments for getQuote.
func PackGetQuote(inputStruct GetQuoteInput) ([]byte, error) {
	return TicksABI.Pack("getQuote", inputStruct.Amm, inputStruct.BaseAssetQuantity)
}

// PackGetQuoteOutput attempts to pack given rate of type *big.Int
// to conform the ABI outputs.
func PackGetQuoteOutput(rate *big.Int) ([]byte, error) {
	return TicksABI.PackOutput("getQuote", rate)
}

func getQuote(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetQuoteGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the GetQuoteInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackGetQuoteInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	bibliophile := bibliophile.NewBibliophileClient(accessibleState)
	output := GetQuote(bibliophile, inputStruct.Amm, inputStruct.BaseAssetQuantity)
	packedOutput, err := PackGetQuoteOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackSampleImpactAskInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackSampleImpactAskInput(input []byte) (common.Address, error) {
	res, err := TicksABI.UnpackInput("sampleImpactAsk", input)
	if err != nil {
		return *new(common.Address), err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackSampleImpactAsk packs [amm] of type common.Address into the appropriate arguments for sampleImpactAsk.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackSampleImpactAsk(amm common.Address) ([]byte, error) {
	return TicksABI.Pack("sampleImpactAsk", amm)
}

// PackSampleImpactAskOutput attempts to pack given impactAsk of type *big.Int
// to conform the ABI outputs.
func PackSampleImpactAskOutput(impactAsk *big.Int) ([]byte, error) {
	return TicksABI.PackOutput("sampleImpactAsk", impactAsk)
}

func sampleImpactAsk(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, SampleImpactAskGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the SampleImpactAskInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackSampleImpactAskInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	bibliophile := bibliophile.NewBibliophileClient(accessibleState)
	output := SampleImpactAsk(bibliophile, inputStruct)
	packedOutput, err := PackSampleImpactAskOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackSampleImpactBidInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackSampleImpactBidInput(input []byte) (common.Address, error) {
	res, err := TicksABI.UnpackInput("sampleImpactBid", input)
	if err != nil {
		return *new(common.Address), err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackSampleImpactBid packs [amm] of type common.Address into the appropriate arguments for sampleImpactBid.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackSampleImpactBid(amm common.Address) ([]byte, error) {
	return TicksABI.Pack("sampleImpactBid", amm)
}

// PackSampleImpactBidOutput attempts to pack given impactBid of type *big.Int
// to conform the ABI outputs.
func PackSampleImpactBidOutput(impactBid *big.Int) ([]byte, error) {
	return TicksABI.PackOutput("sampleImpactBid", impactBid)
}

func sampleImpactBid(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, SampleImpactBidGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the SampleImpactBidInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackSampleImpactBidInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	bibliophile := bibliophile.NewBibliophileClient(accessibleState)
	output := SampleImpactBid(bibliophile, inputStruct)
	packedOutput, err := PackSampleImpactBidOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createTicksPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createTicksPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"getBaseQuote":    getBaseQuote,
		"getPrevTick":     getPrevTick,
		"getQuote":        getQuote,
		"sampleImpactAsk": sampleImpactAsk,
		"sampleImpactBid": sampleImpactBid,
	}

	for name, function := range abiFunctionMap {
		method, ok := TicksABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
